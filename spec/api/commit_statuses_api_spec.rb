=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Bitbucket::CommitStatusesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CommitStatusesApi' do
  before do
    # run before each test
    @api_instance = Bitbucket::CommitStatusesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CommitStatusesApi' do
    it 'should create an instance of CommitStatusesApi' do
      expect(@api_instance).to be_instance_of(Bitbucket::CommitStatusesApi)
    end
  end

  # unit tests for repositories_workspace_repo_slug_commit_commit_statuses_build_key_get
  # Get a build status for a commit
  # Returns the specified build status for a commit.
  # @param commit The commit&#39;s SHA1.
  # @param key The build status&#39; unique key
  # @param repo_slug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
  # @param [Hash] opts the optional parameters
  # @return [Commitstatus]
  describe 'repositories_workspace_repo_slug_commit_commit_statuses_build_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repositories_workspace_repo_slug_commit_commit_statuses_build_key_put
  # Update a build status for a commit
  # Used to update the current status of a build status object on the specific commit.  This operation can also be used to change other properties of the build status:  * &#x60;state&#x60; * &#x60;name&#x60; * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;refname&#x60;  The &#x60;key&#x60; cannot be changed.
  # @param commit The commit&#39;s SHA1.
  # @param key The build status&#39; unique key
  # @param repo_slug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
  # @param [Hash] opts the optional parameters
  # @option opts [Commitstatus] :commitstatus The updated build status object
  # @return [Commitstatus]
  describe 'repositories_workspace_repo_slug_commit_commit_statuses_build_key_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repositories_workspace_repo_slug_commit_commit_statuses_build_post
  # Create a build status for a commit
  # Creates a new build status against the specified commit.  If the specified key already exists, the existing status object will be overwritten.  Example:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo/commit/e10dae226959c2194f2b07b077c07762d93821cf/statuses/build/           -X POST -u jdoe -H &#39;Content-Type: application/json&#39;           -d &#39;{     \&quot;key\&quot;: \&quot;MY-BUILD\&quot;,     \&quot;state\&quot;: \&quot;SUCCESSFUL\&quot;,     \&quot;description\&quot;: \&quot;42 tests passed\&quot;,     \&quot;url\&quot;: \&quot;https://www.example.org/my-build-result\&quot;   }&#39; &#x60;&#x60;&#x60;  When creating a new commit status, you can use a URI template for the URL. Templates are URLs that contain variable names that Bitbucket will evaluate at runtime whenever the URL is displayed anywhere similar to parameter substitution in [Bitbucket Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html). For example, one could use &#x60;https://foo.com/builds/{repository.full_name}&#x60; which Bitbucket will turn into &#x60;https://foo.com/builds/foo/bar&#x60; at render time. The context variables available are &#x60;repository&#x60; and &#x60;commit&#x60;.
  # @param commit The commit&#39;s SHA1.
  # @param repo_slug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
  # @param [Hash] opts the optional parameters
  # @option opts [Commitstatus] :commitstatus The new commit status object.
  # @return [Commitstatus]
  describe 'repositories_workspace_repo_slug_commit_commit_statuses_build_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repositories_workspace_repo_slug_commit_commit_statuses_get
  # List commit statuses for a commit
  # Returns all statuses (e.g. build results) for a specific commit.
  # @param commit The commit&#39;s SHA1.
  # @param repo_slug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). 
  # @option opts [String] :sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;. 
  # @return [PaginatedCommitstatuses]
  describe 'repositories_workspace_repo_slug_commit_commit_statuses_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repositories_workspace_repo_slug_pullrequests_pull_request_id_statuses_get
  # List commit statuses for a pull request
  # Returns all statuses (e.g. build results) for the given pull request.
  # @param pull_request_id The id of the pull request.
  # @param repo_slug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). 
  # @option opts [String] :sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;. 
  # @return [PaginatedCommitstatuses]
  describe 'repositories_workspace_repo_slug_pullrequests_pull_request_id_statuses_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
