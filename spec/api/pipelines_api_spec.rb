=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Bitbucket::PipelinesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PipelinesApi' do
  before do
    # run before each test
    @api_instance = Bitbucket::PipelinesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PipelinesApi' do
    it 'should create an instance of PipelinesApi' do
      expect(@api_instance).to be_instance_of(Bitbucket::PipelinesApi)
    end
  end

  # unit tests for create_deployment_variable
  # Create a variable for an environment
  # Create a deployment environment level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param environment_uuid The environment.
  # @param deployment_variable The variable to create
  # @param [Hash] opts the optional parameters
  # @return [DeploymentVariable]
  describe 'create_deployment_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pipeline_for_repository
  # Run a pipeline
  # Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#39; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#39; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#39; &#x60;&#x60;&#x60; 
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline The pipeline to initiate.
  # @param [Hash] opts the optional parameters
  # @return [Pipeline]
  describe 'create_pipeline_for_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pipeline_variable_for_team
  # Create a variable for a user
  # Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param username The account.
  # @param [Hash] opts the optional parameters
  # @option opts [PipelineVariable] :pipeline_variable The variable to create.
  # @return [PipelineVariable]
  describe 'create_pipeline_variable_for_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pipeline_variable_for_user
  # Create a variable for a user
  # Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param selected_user Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
  # @param [Hash] opts the optional parameters
  # @option opts [PipelineVariable] :pipeline_variable The variable to create.
  # @return [PipelineVariable]
  describe 'create_pipeline_variable_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pipeline_variable_for_workspace
  # Create a variable for a workspace
  # Create a workspace level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [PipelineVariable] :pipeline_variable The variable to create.
  # @return [PipelineVariable]
  describe 'create_pipeline_variable_for_workspace test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_repository_pipeline_known_host
  # Create a known host
  # Create a repository level known host.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_known_host The known host to create.
  # @param [Hash] opts the optional parameters
  # @return [PipelineKnownHost]
  describe 'create_repository_pipeline_known_host test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_repository_pipeline_schedule
  # Create a schedule
  # Create a schedule for the given repository.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_schedule The schedule to create.
  # @param [Hash] opts the optional parameters
  # @return [PipelineSchedule]
  describe 'create_repository_pipeline_schedule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_repository_pipeline_variable
  # Create a variable for a repository
  # Create a repository level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_variable The variable to create.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'create_repository_pipeline_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_deployment_variable
  # Delete a variable for an environment
  # Delete a deployment environment level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param environment_uuid The environment.
  # @param variable_uuid The UUID of the variable to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_deployment_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pipeline_variable_for_team
  # Delete a variable for a team
  # Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param username The account.
  # @param variable_uuid The UUID of the variable to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_pipeline_variable_for_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pipeline_variable_for_user
  # Delete a variable for a user
  # Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param selected_user Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
  # @param variable_uuid The UUID of the variable to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_pipeline_variable_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pipeline_variable_for_workspace
  # Delete a variable for a workspace
  # Delete a workspace level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param variable_uuid The UUID of the variable to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_pipeline_variable_for_workspace test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_repository_pipeline_cache
  # Delete a cache
  # Delete a repository cache.
  # @param workspace The account.
  # @param repo_slug The repository.
  # @param cache_uuid The UUID of the cache to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_repository_pipeline_cache test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_repository_pipeline_caches
  # Delete caches
  # Delete repository cache versions by name.
  # @param workspace The account.
  # @param repo_slug The repository.
  # @param name The cache name.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_repository_pipeline_caches test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_repository_pipeline_key_pair
  # Delete SSH key pair
  # Delete the repository SSH key pair.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_repository_pipeline_key_pair test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_repository_pipeline_known_host
  # Delete a known host
  # Delete a repository level known host.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param known_host_uuid The UUID of the known host to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_repository_pipeline_known_host test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_repository_pipeline_schedule
  # Delete a schedule
  # Delete a schedule.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param schedule_uuid The uuid of the schedule.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_repository_pipeline_schedule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_repository_pipeline_variable
  # Delete a variable for a repository
  # Delete a repository level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param variable_uuid The UUID of the variable to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_repository_pipeline_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_deployment_variables
  # List variables for an environment
  # Find deployment environment level variables.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param environment_uuid The environment.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedDeploymentVariable]
  describe 'get_deployment_variables test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_oidc_configuration
  # Get OpenID configuration for OIDC in Pipelines
  # This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_oidc_configuration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_oidc_keys
  # Get keys for OIDC in Pipelines
  # This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_oidc_keys test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_container_log
  # Get the logs for the build container or a service container for a given step of a pipeline.
  # Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param step_uuid The UUID of the step.
  # @param log_uuid For the main build container specify the step UUID; for a service container specify the service container UUID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_pipeline_container_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_for_repository
  # Get a pipeline
  # Retrieve a specified pipeline
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The pipeline UUID.
  # @param [Hash] opts the optional parameters
  # @return [Pipeline]
  describe 'get_pipeline_for_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_step_for_repository
  # Get a step of a pipeline
  # Retrieve a given step of a pipeline.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param step_uuid The UUID of the step.
  # @param [Hash] opts the optional parameters
  # @return [PipelineStep]
  describe 'get_pipeline_step_for_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_step_log_for_repository
  # Get log file for a step
  # Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param step_uuid The UUID of the step.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_pipeline_step_log_for_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_steps_for_repository
  # List steps for a pipeline
  # Find steps for the given pipeline.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineSteps]
  describe 'get_pipeline_steps_for_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_test_report_test_case_reasons
  # Get test case reasons (output) for a given test case in a step of a pipeline.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param step_uuid The UUID of the step.
  # @param test_case_uuid The UUID of the test case.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_pipeline_test_report_test_case_reasons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_test_report_test_cases
  # Get test cases for a given step of a pipeline.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param step_uuid The UUID of the step.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_pipeline_test_report_test_cases test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_test_reports
  # Get a summary of test reports for a given step of a pipeline.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param step_uuid The UUID of the step.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_pipeline_test_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_variable_for_team
  # Get a variable for a team
  # Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param username The account.
  # @param variable_uuid The UUID of the variable to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'get_pipeline_variable_for_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_variable_for_user
  # Get a variable for a user
  # Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param selected_user Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
  # @param variable_uuid The UUID of the variable to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'get_pipeline_variable_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_variable_for_workspace
  # Get variable for a workspace
  # Retrieve a workspace level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param variable_uuid The UUID of the variable to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'get_pipeline_variable_for_workspace test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_variables_for_team
  # List variables for an account
  # Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param username The account.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineVariables]
  describe 'get_pipeline_variables_for_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_variables_for_user
  # List variables for a user
  # Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param selected_user Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineVariables]
  describe 'get_pipeline_variables_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipeline_variables_for_workspace
  # List variables for a workspace
  # Find workspace level variables.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineVariables]
  describe 'get_pipeline_variables_for_workspace test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pipelines_for_repository
  # List pipelines
  # Find pipelines
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelines]
  describe 'get_pipelines_for_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_cache_content_uri
  # Get cache content URI
  # Retrieve the URI of the content of the specified cache.
  # @param workspace The account.
  # @param repo_slug The repository.
  # @param cache_uuid The UUID of the cache.
  # @param [Hash] opts the optional parameters
  # @return [PipelineCacheContentUri]
  describe 'get_repository_pipeline_cache_content_uri test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_caches
  # List caches
  # Retrieve the repository pipelines caches.
  # @param workspace The account.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineCaches]
  describe 'get_repository_pipeline_caches test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_config
  # Get configuration
  # Retrieve the repository pipelines configuration.
  # @param workspace The account.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PipelinesConfig]
  describe 'get_repository_pipeline_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_known_host
  # Get a known host
  # Retrieve a repository level known host.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param known_host_uuid The UUID of the known host to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [PipelineKnownHost]
  describe 'get_repository_pipeline_known_host test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_known_hosts
  # List known hosts
  # Find repository level known hosts.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineKnownHosts]
  describe 'get_repository_pipeline_known_hosts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_schedule
  # Get a schedule
  # Retrieve a schedule by its UUID.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param schedule_uuid The uuid of the schedule.
  # @param [Hash] opts the optional parameters
  # @return [PipelineSchedule]
  describe 'get_repository_pipeline_schedule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_schedule_executions
  # List executions of a schedule
  # Retrieve the executions of a given schedule.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param schedule_uuid The uuid of the schedule.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineScheduleExecutions]
  describe 'get_repository_pipeline_schedule_executions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_schedules
  # List schedules
  # Retrieve the configured schedules for the given repository.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineSchedules]
  describe 'get_repository_pipeline_schedules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_ssh_key_pair
  # Get SSH key pair
  # Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PipelineSshKeyPair]
  describe 'get_repository_pipeline_ssh_key_pair test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_variable
  # Get a variable for a repository
  # Retrieve a repository level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param variable_uuid The UUID of the variable to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'get_repository_pipeline_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository_pipeline_variables
  # List variables for a repository
  # Find repository level variables.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param [Hash] opts the optional parameters
  # @return [PaginatedPipelineVariables]
  describe 'get_repository_pipeline_variables test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stop_pipeline
  # Stop a pipeline
  # Signal the stop of a pipeline and all of its steps that not have completed yet.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_uuid The UUID of the pipeline.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stop_pipeline test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_deployment_variable
  # Update a variable for an environment
  # Update a deployment environment level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param environment_uuid The environment.
  # @param variable_uuid The UUID of the variable to update.
  # @param deployment_variable The updated deployment variable.
  # @param [Hash] opts the optional parameters
  # @return [DeploymentVariable]
  describe 'update_deployment_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pipeline_variable_for_team
  # Update a variable for a team
  # Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param username The account.
  # @param variable_uuid The UUID of the variable.
  # @param pipeline_variable The updated variable.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'update_pipeline_variable_for_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pipeline_variable_for_user
  # Update a variable for a user
  # Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
  # @param selected_user Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
  # @param variable_uuid The UUID of the variable.
  # @param pipeline_variable The updated variable.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'update_pipeline_variable_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pipeline_variable_for_workspace
  # Update variable for a workspace
  # Update a workspace level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param variable_uuid The UUID of the variable.
  # @param pipeline_variable The updated variable.
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'update_pipeline_variable_for_workspace test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repository_build_number
  # Update the next build number
  # Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_build_number The build number to update.
  # @param [Hash] opts the optional parameters
  # @return [PipelineBuildNumber]
  describe 'update_repository_build_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repository_pipeline_config
  # Update configuration
  # Update the pipelines configuration for a repository.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipelines_config The updated repository pipelines configuration.
  # @param [Hash] opts the optional parameters
  # @return [PipelinesConfig]
  describe 'update_repository_pipeline_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repository_pipeline_key_pair
  # Update SSH key pair
  # Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param pipeline_ssh_key_pair The created or updated SSH key pair.
  # @param [Hash] opts the optional parameters
  # @return [PipelineSshKeyPair]
  describe 'update_repository_pipeline_key_pair test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repository_pipeline_known_host
  # Update a known host
  # Update a repository level known host.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param known_host_uuid The UUID of the known host to update.
  # @param pipeline_known_host The updated known host.
  # @param [Hash] opts the optional parameters
  # @return [PipelineKnownHost]
  describe 'update_repository_pipeline_known_host test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repository_pipeline_schedule
  # Update a schedule
  # Update a schedule.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param schedule_uuid The uuid of the schedule.
  # @param pipeline_schedule The schedule to update.
  # @param [Hash] opts the optional parameters
  # @return [PipelineSchedule]
  describe 'update_repository_pipeline_schedule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repository_pipeline_variable
  # Update a variable for a repository
  # Update a repository level variable.
  # @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
  # @param repo_slug The repository.
  # @param variable_uuid The UUID of the variable to update.
  # @param pipeline_variable The updated variable
  # @param [Hash] opts the optional parameters
  # @return [PipelineVariable]
  describe 'update_repository_pipeline_variable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
