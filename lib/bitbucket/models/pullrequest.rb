=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module Bitbucket
  class Pullrequest < Object
    attr_accessor :links

    # The pull request's unique ID. Note that pull request IDs are only unique within their associated repository.
    attr_accessor :id

    # Title of the pull request.
    attr_accessor :title

    attr_accessor :rendered

    attr_accessor :summary

    # The pull request's current status.
    attr_accessor :state

    attr_accessor :author

    attr_accessor :source

    attr_accessor :destination

    attr_accessor :merge_commit

    # The number of comments for a specific pull request.
    attr_accessor :comment_count

    # The number of open tasks for a specific pull request.
    attr_accessor :task_count

    # A boolean flag indicating if merging the pull request closes the source branch.
    attr_accessor :close_source_branch

    attr_accessor :closed_by

    # Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.
    attr_accessor :reason

    # The ISO8601 timestamp the request was created.
    attr_accessor :created_on

    # The ISO8601 timestamp the request was last updated.
    attr_accessor :updated_on

    # The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request's `self` URL.
    attr_accessor :reviewers

    #         The list of users that are collaborating on this pull request.         Collaborators are user that:          * are added to the pull request as a reviewer (part of the reviewers           list)         * are not explicit reviewers, but have commented on the pull request         * are not explicit reviewers, but have approved the pull request          Each user is wrapped in an object that indicates the user's role and         whether they have approved the pull request. For performance reasons,         the API only returns this list when an API requests a pull request by         id.         
    attr_accessor :participants

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'links' => :'links',
        :'id' => :'id',
        :'title' => :'title',
        :'rendered' => :'rendered',
        :'summary' => :'summary',
        :'state' => :'state',
        :'author' => :'author',
        :'source' => :'source',
        :'destination' => :'destination',
        :'merge_commit' => :'merge_commit',
        :'comment_count' => :'comment_count',
        :'task_count' => :'task_count',
        :'close_source_branch' => :'close_source_branch',
        :'closed_by' => :'closed_by',
        :'reason' => :'reason',
        :'created_on' => :'created_on',
        :'updated_on' => :'updated_on',
        :'reviewers' => :'reviewers',
        :'participants' => :'participants'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'links' => :'PullRequestLinks',
        :'id' => :'Integer',
        :'title' => :'String',
        :'rendered' => :'RenderedPullRequestMarkup',
        :'summary' => :'BaseCommitSummary',
        :'state' => :'String',
        :'author' => :'Account',
        :'source' => :'PullrequestEndpoint',
        :'destination' => :'PullrequestEndpoint',
        :'merge_commit' => :'PullRequestCommit1',
        :'comment_count' => :'Integer',
        :'task_count' => :'Integer',
        :'close_source_branch' => :'Boolean',
        :'closed_by' => :'Account',
        :'reason' => :'String',
        :'created_on' => :'Time',
        :'updated_on' => :'Time',
        :'reviewers' => :'Array<Account>',
        :'participants' => :'Array<Participant>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Object',
      :'PullRequest'
      ]
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'type'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Bitbucket::Pullrequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Bitbucket::Pullrequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'links')
        self.links = attributes[:'links']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'rendered')
        self.rendered = attributes[:'rendered']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'merge_commit')
        self.merge_commit = attributes[:'merge_commit']
      end

      if attributes.key?(:'comment_count')
        self.comment_count = attributes[:'comment_count']
      end

      if attributes.key?(:'task_count')
        self.task_count = attributes[:'task_count']
      end

      if attributes.key?(:'close_source_branch')
        self.close_source_branch = attributes[:'close_source_branch']
      end

      if attributes.key?(:'closed_by')
        self.closed_by = attributes[:'closed_by']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'updated_on')
        self.updated_on = attributes[:'updated_on']
      end

      if attributes.key?(:'reviewers')
        if (value = attributes[:'reviewers']).is_a?(Array)
          self.reviewers = value
        end
      end

      if attributes.key?(:'participants')
        if (value = attributes[:'participants']).is_a?(Array)
          self.participants = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if !@comment_count.nil? && @comment_count < 0
        invalid_properties.push('invalid value for "comment_count", must be greater than or equal to 0.')
      end

      if !@task_count.nil? && @task_count < 0
        invalid_properties.push('invalid value for "task_count", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ["OPEN", "MERGED", "DECLINED", "SUPERSEDED"])
      return false unless state_validator.valid?(@state)
      return false if !@comment_count.nil? && @comment_count < 0
      return false if !@task_count.nil? && @task_count < 0
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["OPEN", "MERGED", "DECLINED", "SUPERSEDED"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] comment_count Value to be assigned
    def comment_count=(comment_count)
      if !comment_count.nil? && comment_count < 0
        fail ArgumentError, 'invalid value for "comment_count", must be greater than or equal to 0.'
      end

      @comment_count = comment_count
    end

    # Custom attribute writer method with validation
    # @param [Object] task_count Value to be assigned
    def task_count=(task_count)
      if !task_count.nil? && task_count < 0
        fail ArgumentError, 'invalid value for "task_count", must be greater than or equal to 0.'
      end

      @task_count = task_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          links == o.links &&
          id == o.id &&
          title == o.title &&
          rendered == o.rendered &&
          summary == o.summary &&
          state == o.state &&
          author == o.author &&
          source == o.source &&
          destination == o.destination &&
          merge_commit == o.merge_commit &&
          comment_count == o.comment_count &&
          task_count == o.task_count &&
          close_source_branch == o.close_source_branch &&
          closed_by == o.closed_by &&
          reason == o.reason &&
          created_on == o.created_on &&
          updated_on == o.updated_on &&
          reviewers == o.reviewers &&
          participants == o.participants && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [links, id, title, rendered, summary, state, author, source, destination, merge_commit, comment_count, task_count, close_source_branch, closed_by, reason, created_on, updated_on, reviewers, participants].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Bitbucket.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
