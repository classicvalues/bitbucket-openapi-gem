=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module Bitbucket
  class AddonApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an app
    # Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \"Develop Apps\" section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  ``` $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" ```
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_delete(opts = {})
      addon_delete_with_http_info(opts)
      nil
    end

    # Delete an app
    # Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  &#x60;&#x60;&#x60; $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; &#x60;&#x60;&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_delete ...'
      end
      # resource path
      local_var_path = '/addon'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List linkers for an app
    # Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_get(opts = {})
      addon_linkers_get_with_http_info(opts)
      nil
    end

    # List linkers for an app
    # Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_get ...'
      end
      # resource path
      local_var_path = '/addon/linkers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a linker for an app
    # Gets a [linker](/cloud/bitbucket/modules/linker/) specified by `linker_key` for the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_get(linker_key, opts = {})
      addon_linkers_linker_key_get_with_http_info(linker_key, opts)
      nil
    end

    # Get a linker for an app
    # Gets a [linker](/cloud/bitbucket/modules/linker/) specified by &#x60;linker_key&#x60; for the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_get_with_http_info(linker_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_get ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_get"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all linker values
    # Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_values_delete(linker_key, opts = {})
      addon_linkers_linker_key_values_delete_with_http_info(linker_key, opts)
      nil
    end

    # Delete all linker values
    # Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_values_delete_with_http_info(linker_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_values_delete ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_values_delete"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}/values'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_values_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_values_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List linker values for a linker
    # Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group `(?K)` which will be translated to `([\\w\\-]+)`. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_values_get(linker_key, opts = {})
      addon_linkers_linker_key_values_get_with_http_info(linker_key, opts)
      nil
    end

    # List linker values for a linker
    # Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_values_get_with_http_info(linker_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_values_get ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_values_get"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}/values'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_values_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_values_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a linker value
    # Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group `(?K)` which will be translated to `([\\w\\-]+)`. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_values_post(linker_key, opts = {})
      addon_linkers_linker_key_values_post_with_http_info(linker_key, opts)
      nil
    end

    # Create a linker value
    # Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_values_post_with_http_info(linker_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_values_post ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_values_post"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}/values'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_values_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_values_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a linker value
    # Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group `(?K)` which will be translated to `([\\w\\-]+)`. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_values_put(linker_key, opts = {})
      addon_linkers_linker_key_values_put_with_http_info(linker_key, opts)
      nil
    end

    # Update a linker value
    # Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_values_put_with_http_info(linker_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_values_put ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_values_put"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}/values'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_values_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_values_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a linker value
    # Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param value_id [Integer] The numeric ID of the linker value.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_values_value_id_delete(linker_key, value_id, opts = {})
      addon_linkers_linker_key_values_value_id_delete_with_http_info(linker_key, value_id, opts)
      nil
    end

    # Delete a linker value
    # Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param value_id [Integer] The numeric ID of the linker value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_values_value_id_delete_with_http_info(linker_key, value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_values_value_id_delete ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_values_value_id_delete"
      end
      # verify the required parameter 'value_id' is set
      if @api_client.config.client_side_validation && value_id.nil?
        fail ArgumentError, "Missing the required parameter 'value_id' when calling AddonApi.addon_linkers_linker_key_values_value_id_delete"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}/values/{value_id}'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s)).sub('{' + 'value_id' + '}', CGI.escape(value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_values_value_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_values_value_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a linker value
    # Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param value_id [Integer] The numeric ID of the linker value.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_linkers_linker_key_values_value_id_get(linker_key, value_id, opts = {})
      addon_linkers_linker_key_values_value_id_get_with_http_info(linker_key, value_id, opts)
      nil
    end

    # Get a linker value
    # Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
    # @param linker_key [String] The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
    # @param value_id [Integer] The numeric ID of the linker value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_linkers_linker_key_values_value_id_get_with_http_info(linker_key, value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_linkers_linker_key_values_value_id_get ...'
      end
      # verify the required parameter 'linker_key' is set
      if @api_client.config.client_side_validation && linker_key.nil?
        fail ArgumentError, "Missing the required parameter 'linker_key' when calling AddonApi.addon_linkers_linker_key_values_value_id_get"
      end
      # verify the required parameter 'value_id' is set
      if @api_client.config.client_side_validation && value_id.nil?
        fail ArgumentError, "Missing the required parameter 'value_id' when calling AddonApi.addon_linkers_linker_key_values_value_id_get"
      end
      # resource path
      local_var_path = '/addon/linkers/{linker_key}/values/{value_id}'.sub('{' + 'linker_key' + '}', CGI.escape(linker_key.to_s)).sub('{' + 'value_id' + '}', CGI.escape(value_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_linkers_linker_key_values_value_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_linkers_linker_key_values_value_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an installed app
    # Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \"Develop Apps\" section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  ``` $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" \\   --header \"Content-Type: application/json\" \\   --data '{}' ```  The new `descriptor` for the installation can be also provided in the body directly.  ``` $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" \\   --header \"Content-Type: application/json\" \\   --data '{\"descriptor\": $NEW_DESCRIPTOR}' ```  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a `descriptor_url`.   ``` $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" \\   --header \"Content-Type: application/json\" \\   --data '{\"descriptor_url\": $NEW_URL}' ```  The `descriptor_url` must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def addon_put(opts = {})
      addon_put_with_http_info(opts)
      nil
    end

    # Update an installed app
    # Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{}&#39; &#x60;&#x60;&#x60;  The new &#x60;descriptor&#x60; for the installation can be also provided in the body directly.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor\&quot;: $NEW_DESCRIPTOR}&#39; &#x60;&#x60;&#x60;  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a &#x60;descriptor_url&#x60;.   &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor_url\&quot;: $NEW_URL}&#39; &#x60;&#x60;&#x60;  The &#x60;descriptor_url&#x60; must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def addon_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddonApi.addon_put ...'
      end
      # resource path
      local_var_path = '/addon'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"AddonApi.addon_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddonApi#addon_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
