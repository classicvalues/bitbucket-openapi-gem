=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module Bitbucket
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a webhook resource
    # Returns the webhook resource or subject types on which webhooks can be registered.  Each resource/subject type contains an `events` link that returns the paginated list of specific events each individual subject type can emit.  This endpoint is publicly accessible and does not require authentication or scopes.  Example:  ``` $ curl https://api.bitbucket.org/2.0/hook_events  {     \"repository\": {         \"links\": {             \"events\": {                 \"href\": \"https://api.bitbucket.org/2.0/hook_events/repository\"             }         }     },     \"workspace\": {         \"links\": {             \"events\": {                 \"href\": \"https://api.bitbucket.org/2.0/hook_events/workspace\"             }         }     } } ```
    # @param [Hash] opts the optional parameters
    # @return [SubjectTypes]
    def hook_events_get(opts = {})
      data, _status_code, _headers = hook_events_get_with_http_info(opts)
      data
    end

    # Get a webhook resource
    # Returns the webhook resource or subject types on which webhooks can be registered.  Each resource/subject type contains an &#x60;events&#x60; link that returns the paginated list of specific events each individual subject type can emit.  This endpoint is publicly accessible and does not require authentication or scopes.  Example:  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events  {     \&quot;repository\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/repository\&quot;             }         }     },     \&quot;workspace\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/workspace\&quot;             }         }     } } &#x60;&#x60;&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubjectTypes, Integer, Hash)>] SubjectTypes data, response status code and response headers
    def hook_events_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.hook_events_get ...'
      end
      # resource path
      local_var_path = '/hook_events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubjectTypes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.hook_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#hook_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List subscribable webhook types
    # Returns a paginated list of all valid webhook events for the specified entity. **The team and user webhooks are deprecated, and you should use workspace instead. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).**  This is public data that does not require any scopes or authentication.  Example:  NOTE: The following example is a truncated response object for the `workspace` `subject_type`. We return the same structure for the other `subject_type` objects.  ``` $ curl https://api.bitbucket.org/2.0/hook_events/workspace {     \"page\": 1,     \"pagelen\": 30,     \"size\": 21,     \"values\": [         {             \"category\": \"Repository\",             \"description\": \"Whenever a repository push occurs\",             \"event\": \"repo:push\",             \"label\": \"Push\"         },         {             \"category\": \"Repository\",             \"description\": \"Whenever a repository fork occurs\",             \"event\": \"repo:fork\",             \"label\": \"Fork\"         },         {             \"category\": \"Repository\",             \"description\": \"Whenever a repository import occurs\",             \"event\": \"repo:imported\",             \"label\": \"Import\"         },         ...         {             \"category\":\"Pull Request\",             \"label\":\"Approved\",             \"description\":\"When someone has approved a pull request\",             \"event\":\"pullrequest:approved\"         },     ] } ```
    # @param subject_type [String] A resource or subject type.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedHookEvents]
    def hook_events_subject_type_get(subject_type, opts = {})
      data, _status_code, _headers = hook_events_subject_type_get_with_http_info(subject_type, opts)
      data
    end

    # List subscribable webhook types
    # Returns a paginated list of all valid webhook events for the specified entity. **The team and user webhooks are deprecated, and you should use workspace instead. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).**  This is public data that does not require any scopes or authentication.  Example:  NOTE: The following example is a truncated response object for the &#x60;workspace&#x60; &#x60;subject_type&#x60;. We return the same structure for the other &#x60;subject_type&#x60; objects.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events/workspace {     \&quot;page\&quot;: 1,     \&quot;pagelen\&quot;: 30,     \&quot;size\&quot;: 21,     \&quot;values\&quot;: [         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository push occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:push\&quot;,             \&quot;label\&quot;: \&quot;Push\&quot;         },         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository fork occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:fork\&quot;,             \&quot;label\&quot;: \&quot;Fork\&quot;         },         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository import occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:imported\&quot;,             \&quot;label\&quot;: \&quot;Import\&quot;         },         ...         {             \&quot;category\&quot;:\&quot;Pull Request\&quot;,             \&quot;label\&quot;:\&quot;Approved\&quot;,             \&quot;description\&quot;:\&quot;When someone has approved a pull request\&quot;,             \&quot;event\&quot;:\&quot;pullrequest:approved\&quot;         },     ] } &#x60;&#x60;&#x60;
    # @param subject_type [String] A resource or subject type.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedHookEvents, Integer, Hash)>] PaginatedHookEvents data, response status code and response headers
    def hook_events_subject_type_get_with_http_info(subject_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.hook_events_subject_type_get ...'
      end
      # verify the required parameter 'subject_type' is set
      if @api_client.config.client_side_validation && subject_type.nil?
        fail ArgumentError, "Missing the required parameter 'subject_type' when calling WebhooksApi.hook_events_subject_type_get"
      end
      # verify enum value
      allowable_values = ["repository", "workspace"]
      if @api_client.config.client_side_validation && !allowable_values.include?(subject_type)
        fail ArgumentError, "invalid value for \"subject_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/hook_events/{subject_type}'.sub('{' + 'subject_type' + '}', CGI.escape(subject_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedHookEvents'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.hook_events_subject_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#hook_events_subject_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List webhooks for a repository
    # Returns a paginated list of webhooks installed on this repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedWebhookSubscriptions]
    def repositories_workspace_repo_slug_hooks_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_hooks_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List webhooks for a repository
    # Returns a paginated list of webhooks installed on this repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedWebhookSubscriptions, Integer, Hash)>] PaginatedWebhookSubscriptions data, response status code and response headers
    def repositories_workspace_repo_slug_hooks_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.repositories_workspace_repo_slug_hooks_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/hooks'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedWebhookSubscriptions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.repositories_workspace_repo_slug_hooks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#repositories_workspace_repo_slug_hooks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a webhook for a repository
    # Creates a new webhook on the specified repository.  Example:  ``` $ curl -X POST -u credentials -H 'Content-Type: application/json'   https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks   -d '     {       \"description\": \"Webhook Description\",       \"url\": \"https://example.com/\",       \"active\": true,       \"events\": [         \"repo:push\",         \"issue:created\",         \"issue:updated\"       ]     }' ```  Note that this call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: `webhook`, `repository` and `issue`.  Also note that the `url` must properly resolve and cannot be an internal, non-routed address.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSubscription]
    def repositories_workspace_repo_slug_hooks_post(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_hooks_post_with_http_info(repo_slug, workspace, opts)
      data
    end

    # Create a webhook for a repository
    # Creates a new webhook on the specified repository.  Example:  &#x60;&#x60;&#x60; $ curl -X POST -u credentials -H &#39;Content-Type: application/json&#39;   https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks   -d &#39;     {       \&quot;description\&quot;: \&quot;Webhook Description\&quot;,       \&quot;url\&quot;: \&quot;https://example.com/\&quot;,       \&quot;active\&quot;: true,       \&quot;events\&quot;: [         \&quot;repo:push\&quot;,         \&quot;issue:created\&quot;,         \&quot;issue:updated\&quot;       ]     }&#39; &#x60;&#x60;&#x60;  Note that this call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: &#x60;webhook&#x60;, &#x60;repository&#x60; and &#x60;issue&#x60;.  Also note that the &#x60;url&#x60; must properly resolve and cannot be an internal, non-routed address.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSubscription, Integer, Hash)>] WebhookSubscription data, response status code and response headers
    def repositories_workspace_repo_slug_hooks_post_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.repositories_workspace_repo_slug_hooks_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/hooks'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.repositories_workspace_repo_slug_hooks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#repositories_workspace_repo_slug_hooks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a webhook for a repository
    # Deletes the specified webhook subscription from the given repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_hooks_uid_delete(repo_slug, uid, workspace, opts = {})
      repositories_workspace_repo_slug_hooks_uid_delete_with_http_info(repo_slug, uid, workspace, opts)
      nil
    end

    # Delete a webhook for a repository
    # Deletes the specified webhook subscription from the given repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_hooks_uid_delete_with_http_info(repo_slug, uid, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.repositories_workspace_repo_slug_hooks_uid_delete ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_delete"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/hooks/{uid}'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.repositories_workspace_repo_slug_hooks_uid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#repositories_workspace_repo_slug_hooks_uid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a webhook for a repository
    # Returns the webhook with the specified id installed on the specified repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSubscription]
    def repositories_workspace_repo_slug_hooks_uid_get(repo_slug, uid, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_hooks_uid_get_with_http_info(repo_slug, uid, workspace, opts)
      data
    end

    # Get a webhook for a repository
    # Returns the webhook with the specified id installed on the specified repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSubscription, Integer, Hash)>] WebhookSubscription data, response status code and response headers
    def repositories_workspace_repo_slug_hooks_uid_get_with_http_info(repo_slug, uid, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.repositories_workspace_repo_slug_hooks_uid_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_get"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/hooks/{uid}'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.repositories_workspace_repo_slug_hooks_uid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#repositories_workspace_repo_slug_hooks_uid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a webhook for a repository
    # Updates the specified webhook subscription.  The following properties can be mutated:  * `description` * `url` * `active` * `events`
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSubscription]
    def repositories_workspace_repo_slug_hooks_uid_put(repo_slug, uid, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_hooks_uid_put_with_http_info(repo_slug, uid, workspace, opts)
      data
    end

    # Update a webhook for a repository
    # Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSubscription, Integer, Hash)>] WebhookSubscription data, response status code and response headers
    def repositories_workspace_repo_slug_hooks_uid_put_with_http_info(repo_slug, uid, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.repositories_workspace_repo_slug_hooks_uid_put ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_put"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.repositories_workspace_repo_slug_hooks_uid_put"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/hooks/{uid}'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.repositories_workspace_repo_slug_hooks_uid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#repositories_workspace_repo_slug_hooks_uid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List webhooks for a workspace
    # Returns a paginated list of webhooks installed on this workspace.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedWebhookSubscriptions]
    def workspaces_workspace_hooks_get(workspace, opts = {})
      data, _status_code, _headers = workspaces_workspace_hooks_get_with_http_info(workspace, opts)
      data
    end

    # List webhooks for a workspace
    # Returns a paginated list of webhooks installed on this workspace.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedWebhookSubscriptions, Integer, Hash)>] PaginatedWebhookSubscriptions data, response status code and response headers
    def workspaces_workspace_hooks_get_with_http_info(workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.workspaces_workspace_hooks_get ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.workspaces_workspace_hooks_get"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/hooks'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedWebhookSubscriptions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.workspaces_workspace_hooks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#workspaces_workspace_hooks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a webhook for a workspace
    # Creates a new webhook on the specified workspace.  Workspace webhooks are fired for events from all repositories contained by that workspace.  Example:  ``` $ curl -X POST -u credentials -H 'Content-Type: application/json'   https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks   -d '     {       \"description\": \"Webhook Description\",       \"url\": \"https://example.com/\",       \"active\": true,       \"events\": [         \"repo:push\",         \"issue:created\",         \"issue:updated\"       ]     }' ```  This call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: `webhook`, `repository` and `issue`.  The `url` must properly resolve and cannot be an internal, non-routed address.  Only workspace owners can install webhooks on workspaces.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSubscription]
    def workspaces_workspace_hooks_post(workspace, opts = {})
      data, _status_code, _headers = workspaces_workspace_hooks_post_with_http_info(workspace, opts)
      data
    end

    # Create a webhook for a workspace
    # Creates a new webhook on the specified workspace.  Workspace webhooks are fired for events from all repositories contained by that workspace.  Example:  &#x60;&#x60;&#x60; $ curl -X POST -u credentials -H &#39;Content-Type: application/json&#39;   https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks   -d &#39;     {       \&quot;description\&quot;: \&quot;Webhook Description\&quot;,       \&quot;url\&quot;: \&quot;https://example.com/\&quot;,       \&quot;active\&quot;: true,       \&quot;events\&quot;: [         \&quot;repo:push\&quot;,         \&quot;issue:created\&quot;,         \&quot;issue:updated\&quot;       ]     }&#39; &#x60;&#x60;&#x60;  This call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: &#x60;webhook&#x60;, &#x60;repository&#x60; and &#x60;issue&#x60;.  The &#x60;url&#x60; must properly resolve and cannot be an internal, non-routed address.  Only workspace owners can install webhooks on workspaces.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSubscription, Integer, Hash)>] WebhookSubscription data, response status code and response headers
    def workspaces_workspace_hooks_post_with_http_info(workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.workspaces_workspace_hooks_post ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.workspaces_workspace_hooks_post"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/hooks'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.workspaces_workspace_hooks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#workspaces_workspace_hooks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a webhook for a workspace
    # Deletes the specified webhook subscription from the given workspace.
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def workspaces_workspace_hooks_uid_delete(uid, workspace, opts = {})
      workspaces_workspace_hooks_uid_delete_with_http_info(uid, workspace, opts)
      nil
    end

    # Delete a webhook for a workspace
    # Deletes the specified webhook subscription from the given workspace.
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def workspaces_workspace_hooks_uid_delete_with_http_info(uid, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.workspaces_workspace_hooks_uid_delete ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling WebhooksApi.workspaces_workspace_hooks_uid_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.workspaces_workspace_hooks_uid_delete"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/hooks/{uid}'.sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.workspaces_workspace_hooks_uid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#workspaces_workspace_hooks_uid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a webhook for a workspace
    # Returns the webhook with the specified id installed on the given workspace.
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSubscription]
    def workspaces_workspace_hooks_uid_get(uid, workspace, opts = {})
      data, _status_code, _headers = workspaces_workspace_hooks_uid_get_with_http_info(uid, workspace, opts)
      data
    end

    # Get a webhook for a workspace
    # Returns the webhook with the specified id installed on the given workspace.
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSubscription, Integer, Hash)>] WebhookSubscription data, response status code and response headers
    def workspaces_workspace_hooks_uid_get_with_http_info(uid, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.workspaces_workspace_hooks_uid_get ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling WebhooksApi.workspaces_workspace_hooks_uid_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.workspaces_workspace_hooks_uid_get"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/hooks/{uid}'.sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.workspaces_workspace_hooks_uid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#workspaces_workspace_hooks_uid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a webhook for a workspace
    # Updates the specified webhook subscription.  The following properties can be mutated:  * `description` * `url` * `active` * `events`
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSubscription]
    def workspaces_workspace_hooks_uid_put(uid, workspace, opts = {})
      data, _status_code, _headers = workspaces_workspace_hooks_uid_put_with_http_info(uid, workspace, opts)
      data
    end

    # Update a webhook for a workspace
    # Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
    # @param uid [String] Installed webhook&#39;s ID
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSubscription, Integer, Hash)>] WebhookSubscription data, response status code and response headers
    def workspaces_workspace_hooks_uid_put_with_http_info(uid, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.workspaces_workspace_hooks_uid_put ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling WebhooksApi.workspaces_workspace_hooks_uid_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling WebhooksApi.workspaces_workspace_hooks_uid_put"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/hooks/{uid}'.sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"WebhooksApi.workspaces_workspace_hooks_uid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#workspaces_workspace_hooks_uid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
