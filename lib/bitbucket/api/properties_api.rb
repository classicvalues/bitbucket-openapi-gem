=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module Bitbucket
  class PropertiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a commit application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param commit [String] The commit.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_commit_hosted_property_value(workspace, repo_slug, commit, app_key, property_name, opts = {})
      delete_commit_hosted_property_value_with_http_info(workspace, repo_slug, commit, app_key, property_name, opts)
      nil
    end

    # Delete a commit application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param commit [String] The commit.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_commit_hosted_property_value_with_http_info(workspace, repo_slug, commit, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.delete_commit_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.delete_commit_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.delete_commit_hosted_property_value"
      end
      # verify the required parameter 'commit' is set
      if @api_client.config.client_side_validation && commit.nil?
        fail ArgumentError, "Missing the required parameter 'commit' when calling PropertiesApi.delete_commit_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.delete_commit_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.delete_commit_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'commit' + '}', CGI.escape(commit.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.delete_commit_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#delete_commit_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a pull request application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param pullrequest_id [String] The pull request ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pull_request_hosted_property_value(workspace, repo_slug, pullrequest_id, app_key, property_name, opts = {})
      delete_pull_request_hosted_property_value_with_http_info(workspace, repo_slug, pullrequest_id, app_key, property_name, opts)
      nil
    end

    # Delete a pull request application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param pullrequest_id [String] The pull request ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pull_request_hosted_property_value_with_http_info(workspace, repo_slug, pullrequest_id, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.delete_pull_request_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.delete_pull_request_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.delete_pull_request_hosted_property_value"
      end
      # verify the required parameter 'pullrequest_id' is set
      if @api_client.config.client_side_validation && pullrequest_id.nil?
        fail ArgumentError, "Missing the required parameter 'pullrequest_id' when calling PropertiesApi.delete_pull_request_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.delete_pull_request_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.delete_pull_request_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pullrequest_id' + '}', CGI.escape(pullrequest_id.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.delete_pull_request_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#delete_pull_request_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_hosted_property_value(workspace, repo_slug, app_key, property_name, opts = {})
      delete_repository_hosted_property_value_with_http_info(workspace, repo_slug, app_key, property_name, opts)
      nil
    end

    # Delete a repository application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_hosted_property_value_with_http_info(workspace, repo_slug, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.delete_repository_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.delete_repository_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.delete_repository_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.delete_repository_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.delete_repository_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.delete_repository_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#delete_repository_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_hosted_property_value(selected_user, app_key, property_name, opts = {})
      delete_user_hosted_property_value_with_http_info(selected_user, app_key, property_name, opts)
      nil
    end

    # Delete a user application property
    # Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_hosted_property_value_with_http_info(selected_user, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.delete_user_hosted_property_value ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PropertiesApi.delete_user_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.delete_user_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.delete_user_hosted_property_value"
      end
      # resource path
      local_var_path = '/users/{selected_user}/properties/{app_key}/{property_name}'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.delete_user_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#delete_user_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a commit application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param commit [String] The commit.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationProperty]
    def get_commit_hosted_property_value(workspace, repo_slug, commit, app_key, property_name, opts = {})
      data, _status_code, _headers = get_commit_hosted_property_value_with_http_info(workspace, repo_slug, commit, app_key, property_name, opts)
      data
    end

    # Get a commit application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param commit [String] The commit.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationProperty, Integer, Hash)>] ApplicationProperty data, response status code and response headers
    def get_commit_hosted_property_value_with_http_info(workspace, repo_slug, commit, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.get_commit_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.get_commit_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.get_commit_hosted_property_value"
      end
      # verify the required parameter 'commit' is set
      if @api_client.config.client_side_validation && commit.nil?
        fail ArgumentError, "Missing the required parameter 'commit' when calling PropertiesApi.get_commit_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.get_commit_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.get_commit_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'commit' + '}', CGI.escape(commit.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationProperty'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.get_commit_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#get_commit_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a pull request application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param pullrequest_id [String] The pull request ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationProperty]
    def get_pull_request_hosted_property_value(workspace, repo_slug, pullrequest_id, app_key, property_name, opts = {})
      data, _status_code, _headers = get_pull_request_hosted_property_value_with_http_info(workspace, repo_slug, pullrequest_id, app_key, property_name, opts)
      data
    end

    # Get a pull request application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param pullrequest_id [String] The pull request ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationProperty, Integer, Hash)>] ApplicationProperty data, response status code and response headers
    def get_pull_request_hosted_property_value_with_http_info(workspace, repo_slug, pullrequest_id, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.get_pull_request_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.get_pull_request_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.get_pull_request_hosted_property_value"
      end
      # verify the required parameter 'pullrequest_id' is set
      if @api_client.config.client_side_validation && pullrequest_id.nil?
        fail ArgumentError, "Missing the required parameter 'pullrequest_id' when calling PropertiesApi.get_pull_request_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.get_pull_request_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.get_pull_request_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pullrequest_id' + '}', CGI.escape(pullrequest_id.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationProperty'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.get_pull_request_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#get_pull_request_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationProperty]
    def get_repository_hosted_property_value(workspace, repo_slug, app_key, property_name, opts = {})
      data, _status_code, _headers = get_repository_hosted_property_value_with_http_info(workspace, repo_slug, app_key, property_name, opts)
      data
    end

    # Get a repository application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationProperty, Integer, Hash)>] ApplicationProperty data, response status code and response headers
    def get_repository_hosted_property_value_with_http_info(workspace, repo_slug, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.get_repository_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.get_repository_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.get_repository_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.get_repository_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.get_repository_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationProperty'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.get_repository_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#get_repository_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationProperty]
    def retrieve_user_hosted_property_value(selected_user, app_key, property_name, opts = {})
      data, _status_code, _headers = retrieve_user_hosted_property_value_with_http_info(selected_user, app_key, property_name, opts)
      data
    end

    # Get a user application property
    # Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationProperty, Integer, Hash)>] ApplicationProperty data, response status code and response headers
    def retrieve_user_hosted_property_value_with_http_info(selected_user, app_key, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.retrieve_user_hosted_property_value ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PropertiesApi.retrieve_user_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.retrieve_user_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.retrieve_user_hosted_property_value"
      end
      # resource path
      local_var_path = '/users/{selected_user}/properties/{app_key}/{property_name}'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationProperty'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.retrieve_user_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#retrieve_user_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a commit application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param commit [String] The commit.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_commit_hosted_property_value(workspace, repo_slug, commit, app_key, property_name, request_body, opts = {})
      update_commit_hosted_property_value_with_http_info(workspace, repo_slug, commit, app_key, property_name, request_body, opts)
      nil
    end

    # Update a commit application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param commit [String] The commit.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_commit_hosted_property_value_with_http_info(workspace, repo_slug, commit, app_key, property_name, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.update_commit_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.update_commit_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.update_commit_hosted_property_value"
      end
      # verify the required parameter 'commit' is set
      if @api_client.config.client_side_validation && commit.nil?
        fail ArgumentError, "Missing the required parameter 'commit' when calling PropertiesApi.update_commit_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.update_commit_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.update_commit_hosted_property_value"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling PropertiesApi.update_commit_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'commit' + '}', CGI.escape(commit.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.update_commit_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#update_commit_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a pull request application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param pullrequest_id [String] The pull request ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_pull_request_hosted_property_value(workspace, repo_slug, pullrequest_id, app_key, property_name, request_body, opts = {})
      update_pull_request_hosted_property_value_with_http_info(workspace, repo_slug, pullrequest_id, app_key, property_name, request_body, opts)
      nil
    end

    # Update a pull request application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param pullrequest_id [String] The pull request ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_pull_request_hosted_property_value_with_http_info(workspace, repo_slug, pullrequest_id, app_key, property_name, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.update_pull_request_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.update_pull_request_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.update_pull_request_hosted_property_value"
      end
      # verify the required parameter 'pullrequest_id' is set
      if @api_client.config.client_side_validation && pullrequest_id.nil?
        fail ArgumentError, "Missing the required parameter 'pullrequest_id' when calling PropertiesApi.update_pull_request_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.update_pull_request_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.update_pull_request_hosted_property_value"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling PropertiesApi.update_pull_request_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pullrequest_id' + '}', CGI.escape(pullrequest_id.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.update_pull_request_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#update_pull_request_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a repository application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_repository_hosted_property_value(workspace, repo_slug, app_key, property_name, request_body, opts = {})
      update_repository_hosted_property_value_with_http_info(workspace, repo_slug, app_key, property_name, request_body, opts)
      nil
    end

    # Update a repository application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
    # @param workspace [String] The repository container; either the workspace slug or the UUID in curly braces.
    # @param repo_slug [String] The repository.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_repository_hosted_property_value_with_http_info(workspace, repo_slug, app_key, property_name, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.update_repository_hosted_property_value ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PropertiesApi.update_repository_hosted_property_value"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PropertiesApi.update_repository_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.update_repository_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.update_repository_hosted_property_value"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling PropertiesApi.update_repository_hosted_property_value"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.update_repository_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#update_repository_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_user_hosted_property_value(selected_user, app_key, property_name, request_body, opts = {})
      update_user_hosted_property_value_with_http_info(selected_user, app_key, property_name, request_body, opts)
      nil
    end

    # Update a user application property
    # Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param app_key [String] The key of the Connect app.
    # @param property_name [String] The name of the property.
    # @param request_body [Hash<String, Object>] The application property to create or update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_user_hosted_property_value_with_http_info(selected_user, app_key, property_name, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.update_user_hosted_property_value ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PropertiesApi.update_user_hosted_property_value"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling PropertiesApi.update_user_hosted_property_value"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling PropertiesApi.update_user_hosted_property_value"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling PropertiesApi.update_user_hosted_property_value"
      end
      # resource path
      local_var_path = '/users/{selected_user}/properties/{app_key}/{property_name}'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s)).sub('{' + 'app_key' + '}', CGI.escape(app_key.to_s)).sub('{' + 'property_name' + '}', CGI.escape(property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PropertiesApi.update_user_hosted_property_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#update_user_hosted_property_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
