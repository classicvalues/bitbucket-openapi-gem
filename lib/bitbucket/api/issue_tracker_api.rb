=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module Bitbucket
  class IssueTrackerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a component for issues
    # Returns the specified issue tracker component object.
    # @param component_id [Integer] The component&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Component]
    def repositories_workspace_repo_slug_components_component_id_get(component_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_components_component_id_get_with_http_info(component_id, repo_slug, workspace, opts)
      data
    end

    # Get a component for issues
    # Returns the specified issue tracker component object.
    # @param component_id [Integer] The component&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Component, Integer, Hash)>] Component data, response status code and response headers
    def repositories_workspace_repo_slug_components_component_id_get_with_http_info(component_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_components_component_id_get ...'
      end
      # verify the required parameter 'component_id' is set
      if @api_client.config.client_side_validation && component_id.nil?
        fail ArgumentError, "Missing the required parameter 'component_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_components_component_id_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_components_component_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_components_component_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/components/{component_id}'.sub('{' + 'component_id' + '}', CGI.escape(component_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Component'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_components_component_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_components_component_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List components
    # Returns the components that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedComponents]
    def repositories_workspace_repo_slug_components_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_components_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List components
    # Returns the components that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedComponents, Integer, Hash)>] PaginatedComponents data, response status code and response headers
    def repositories_workspace_repo_slug_components_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_components_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_components_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_components_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/components'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedComponents'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_components_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_components_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export issues
    # A POST request to this endpoint initiates a new background celery task that archives the repo's issues.  For example, you can run:  curl -u <username> -X POST http://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/ issues/export  When the job has been accepted, it will return a 202 (Accepted) along with a unique url to this job in the 'Location' response header. This url is the endpoint for where the user can obtain their zip files.\"
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :request_body The options to apply to the export. Available options include &#x60;project_key&#x60; and &#x60;project_name&#x60; which, if specified, are used as the project key and name in the exported Jira json format. Option &#x60;send_email&#x60; specifies whether an email should be sent upon export result. Option &#x60;include_attachments&#x60; specifies whether attachments are included in the export.
    # @return [nil]
    def repositories_workspace_repo_slug_issues_export_post(repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_issues_export_post_with_http_info(repo_slug, workspace, opts)
      nil
    end

    # Export issues
    # A POST request to this endpoint initiates a new background celery task that archives the repo&#39;s issues.  For example, you can run:  curl -u &lt;username&gt; -X POST http://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/ issues/export  When the job has been accepted, it will return a 202 (Accepted) along with a unique url to this job in the &#39;Location&#39; response header. This url is the endpoint for where the user can obtain their zip files.\&quot;
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :request_body The options to apply to the export. Available options include &#x60;project_key&#x60; and &#x60;project_name&#x60; which, if specified, are used as the project key and name in the exported Jira json format. Option &#x60;send_email&#x60; specifies whether an email should be sent upon export result. Option &#x60;include_attachments&#x60; specifies whether attachments are included in the export.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_issues_export_post_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_export_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_export_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_export_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/export'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check issue export status
    # This endpoint is used to poll for the progress of an issue export job and return the zip file after the job is complete. As long as the job is running, this will return a 200 response with in the response body a description of the current status.  After the job has been scheduled, but before it starts executing, this endpoint's response is:  {  \"type\": \"issue_job_status\",  \"status\": \"ACCEPTED\",  \"phase\": \"Initializing\",  \"total\": 0,  \"count\": 0,  \"pct\": 0 }   Then once it starts running, it becomes:  {  \"type\": \"issue_job_status\",  \"status\": \"STARTED\",  \"phase\": \"Attachments\",  \"total\": 15,  \"count\": 11,  \"pct\": 73 }  Once the job has successfully completed, it returns a stream of the zip file.
    # @param repo_name [String] The name of the repo
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param task_id [String] The ID of the export task
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [IssueJobStatus]
    def repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get(repo_name, repo_slug, task_id, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get_with_http_info(repo_name, repo_slug, task_id, workspace, opts)
      data
    end

    # Check issue export status
    # This endpoint is used to poll for the progress of an issue export job and return the zip file after the job is complete. As long as the job is running, this will return a 200 response with in the response body a description of the current status.  After the job has been scheduled, but before it starts executing, this endpoint&#39;s response is:  {  \&quot;type\&quot;: \&quot;issue_job_status\&quot;,  \&quot;status\&quot;: \&quot;ACCEPTED\&quot;,  \&quot;phase\&quot;: \&quot;Initializing\&quot;,  \&quot;total\&quot;: 0,  \&quot;count\&quot;: 0,  \&quot;pct\&quot;: 0 }   Then once it starts running, it becomes:  {  \&quot;type\&quot;: \&quot;issue_job_status\&quot;,  \&quot;status\&quot;: \&quot;STARTED\&quot;,  \&quot;phase\&quot;: \&quot;Attachments\&quot;,  \&quot;total\&quot;: 15,  \&quot;count\&quot;: 11,  \&quot;pct\&quot;: 73 }  Once the job has successfully completed, it returns a stream of the zip file.
    # @param repo_name [String] The name of the repo
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param task_id [String] The ID of the export task
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueJobStatus, Integer, Hash)>] IssueJobStatus data, response status code and response headers
    def repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get_with_http_info(repo_name, repo_slug, task_id, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get ...'
      end
      # verify the required parameter 'repo_name' is set
      if @api_client.config.client_side_validation && repo_name.nil?
        fail ArgumentError, "Missing the required parameter 'repo_name' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip'.sub('{' + 'repo_name' + '}', CGI.escape(repo_name.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueJobStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_export_repo_name_issues_task_id_zip_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List issues
    # Returns the issues in the issue tracker.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedIssues]
    def repositories_workspace_repo_slug_issues_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List issues
    # Returns the issues in the issue tracker.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedIssues, Integer, Hash)>] PaginatedIssues data, response status code and response headers
    def repositories_workspace_repo_slug_issues_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedIssues'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check issue import status
    # When using GET, this endpoint reports the status of the current import task. Request example:  ``` $ curl -u <username> -X GET https://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/issues/import ```  After the job has been scheduled, but before it starts executing, this endpoint's response is:  ``` < HTTP/1.1 202 Accepted {     \"type\": \"issue_job_status\",     \"status\": \"PENDING\",     \"phase\": \"Attachments\",     \"total\": 15,     \"count\": 0,     \"percent\": 0 } ```  Once it starts running, it is a 202 response with status STARTED and progress filled.  After it is finished, it becomes a 200 response with status SUCCESS or FAILURE.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [IssueJobStatus]
    def repositories_workspace_repo_slug_issues_import_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_import_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # Check issue import status
    # When using GET, this endpoint reports the status of the current import task. Request example:  &#x60;&#x60;&#x60; $ curl -u &lt;username&gt; -X GET https://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/issues/import &#x60;&#x60;&#x60;  After the job has been scheduled, but before it starts executing, this endpoint&#39;s response is:  &#x60;&#x60;&#x60; &lt; HTTP/1.1 202 Accepted {     \&quot;type\&quot;: \&quot;issue_job_status\&quot;,     \&quot;status\&quot;: \&quot;PENDING\&quot;,     \&quot;phase\&quot;: \&quot;Attachments\&quot;,     \&quot;total\&quot;: 15,     \&quot;count\&quot;: 0,     \&quot;percent\&quot;: 0 } &#x60;&#x60;&#x60;  Once it starts running, it is a 202 response with status STARTED and progress filled.  After it is finished, it becomes a 200 response with status SUCCESS or FAILURE.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueJobStatus, Integer, Hash)>] IssueJobStatus data, response status code and response headers
    def repositories_workspace_repo_slug_issues_import_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_import_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_import_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_import_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/import'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueJobStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_import_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_import_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import issues
    # A POST request to this endpoint will import the zip file given by the archive parameter into the repository. All existing issues will be deleted and replaced by the contents of the imported zip file.  Imports are done through a multipart/form-data POST. There is one valid and required form field, with the name \"archive,\" which needs to be a file field:  ``` $ curl -u <username> -X POST -F archive=@/path/to/file.zip https://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/issues/import ```  When the import job is accepted, here is example output:  ``` < HTTP/1.1 202 Accepted  {     \"type\": \"issue_job_status\",     \"status\": \"ACCEPTED\",     \"phase\": \"Attachments\",     \"total\": 15,     \"count\": 0,     \"percent\": 0 } ```
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [IssueJobStatus]
    def repositories_workspace_repo_slug_issues_import_post(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_import_post_with_http_info(repo_slug, workspace, opts)
      data
    end

    # Import issues
    # A POST request to this endpoint will import the zip file given by the archive parameter into the repository. All existing issues will be deleted and replaced by the contents of the imported zip file.  Imports are done through a multipart/form-data POST. There is one valid and required form field, with the name \&quot;archive,\&quot; which needs to be a file field:  &#x60;&#x60;&#x60; $ curl -u &lt;username&gt; -X POST -F archive&#x3D;@/path/to/file.zip https://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/issues/import &#x60;&#x60;&#x60;  When the import job is accepted, here is example output:  &#x60;&#x60;&#x60; &lt; HTTP/1.1 202 Accepted  {     \&quot;type\&quot;: \&quot;issue_job_status\&quot;,     \&quot;status\&quot;: \&quot;ACCEPTED\&quot;,     \&quot;phase\&quot;: \&quot;Attachments\&quot;,     \&quot;total\&quot;: 15,     \&quot;count\&quot;: 0,     \&quot;percent\&quot;: 0 } &#x60;&#x60;&#x60;
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueJobStatus, Integer, Hash)>] IssueJobStatus data, response status code and response headers
    def repositories_workspace_repo_slug_issues_import_post_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_import_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_import_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_import_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/import'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueJobStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_import_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List attachments for an issue
    # Returns all attachments for this issue.  This returns the files' meta data. This does not return the files' actual contents.  The files are always ordered by their upload date.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedIssueAttachments]
    def repositories_workspace_repo_slug_issues_issue_id_attachments_get(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_attachments_get_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # List attachments for an issue
    # Returns all attachments for this issue.  This returns the files&#39; meta data. This does not return the files&#39; actual contents.  The files are always ordered by their upload date.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedIssueAttachments, Integer, Hash)>] PaginatedIssueAttachments data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_attachments_get_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedIssueAttachments'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an attachment for an issue
    # Deletes an attachment.
    # @param issue_id [String] The issue id
    # @param path [String] Path to the file.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete(issue_id, path, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete_with_http_info(issue_id, path, repo_slug, workspace, opts)
      nil
    end

    # Delete an attachment for an issue
    # Deletes an attachment.
    # @param issue_id [String] The issue id
    # @param path [String] Path to the file.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete_with_http_info(issue_id, path, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'path' + '}', CGI.escape(path.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_attachments_path_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attachment for an issue
    # Returns the contents of the specified file attachment.  Note that this endpoint does not return a JSON response, but instead returns a redirect pointing to the actual file that in turn will return the raw contents.  The redirect URL contains a one-time token that has a limited lifetime. As a result, the link should not be persisted, stored, or shared.
    # @param issue_id [String] The issue id
    # @param path [String] Path to the file.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_issues_issue_id_attachments_path_get(issue_id, path, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_issues_issue_id_attachments_path_get_with_http_info(issue_id, path, repo_slug, workspace, opts)
      nil
    end

    # Get attachment for an issue
    # Returns the contents of the specified file attachment.  Note that this endpoint does not return a JSON response, but instead returns a redirect pointing to the actual file that in turn will return the raw contents.  The redirect URL contains a one-time token that has a limited lifetime. As a result, the link should not be persisted, stored, or shared.
    # @param issue_id [String] The issue id
    # @param path [String] Path to the file.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_attachments_path_get_with_http_info(issue_id, path, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_get"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'path' + '}', CGI.escape(path.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_path_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_attachments_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an attachment to an issue
    # Upload new issue attachments.  To upload files, perform a `multipart/form-data` POST containing one or more file fields.  When a file is uploaded with the same name as an existing attachment, then the existing file will be replaced.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_issues_issue_id_attachments_post(issue_id, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_issues_issue_id_attachments_post_with_http_info(issue_id, repo_slug, workspace, opts)
      nil
    end

    # Upload an attachment to an issue
    # Upload new issue attachments.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more file fields.  When a file is uploaded with the same name as an existing attachment, then the existing file will be replaced.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_attachments_post_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_post ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_post"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_attachments_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issue change object
    # Returns the specified issue change object.  This resource is only available on repositories that have the issue tracker enabled.
    # @param change_id [String] The issue change id
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [IssueChange]
    def repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get(change_id, issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get_with_http_info(change_id, issue_id, repo_slug, workspace, opts)
      data
    end

    # Get issue change object
    # Returns the specified issue change object.  This resource is only available on repositories that have the issue tracker enabled.
    # @param change_id [String] The issue change id
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueChange, Integer, Hash)>] IssueChange data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get_with_http_info(change_id, issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get ...'
      end
      # verify the required parameter 'change_id' is set
      if @api_client.config.client_side_validation && change_id.nil?
        fail ArgumentError, "Missing the required parameter 'change_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get"
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes/{change_id}'.sub('{' + 'change_id' + '}', CGI.escape(change_id.to_s)).sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueChange'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_changes_change_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List changes on an issue
    # Returns the list of all changes that have been made to the specified issue. Changes are returned in chronological order with the oldest change first.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the `/issues/123/changes` endpoint. It also has a comment associated with the change.  Note that this operation is changing significantly, due to privacy changes. See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-the-issue-changes-api) for details.  ``` $ curl -s https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes - | jq .  {   \"pagelen\": 20,   \"values\": [     {       \"changes\": {         \"priority\": {           \"new\": \"trivial\",           \"old\": \"major\"         },         \"assignee\": {           \"new\": \"\",           \"old\": \"evzijst\"         },         \"assignee_account_id\": {           \"new\": \"\",           \"old\": \"557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\"         },         \"kind\": {           \"new\": \"enhancement\",           \"old\": \"bug\"         }       },       \"links\": {         \"self\": {           \"href\": \"https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes/2\"         },         \"html\": {           \"href\": \"https://bitbucket.org/evzijst/dogslow/issues/1#comment-2\"         }       },       \"issue\": {         \"links\": {           \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1\"           }         },         \"type\": \"issue\",         \"id\": 1,         \"repository\": {           \"links\": {             \"self\": {               \"href\": \"https://api.bitbucket.org/2.0/repositories/evzijst/dogslow\"             },             \"html\": {               \"href\": \"https://bitbucket.org/evzijst/dogslow\"             },             \"avatar\": {               \"href\": \"https://bitbucket.org/evzijst/dogslow/avatar/32/\"             }           },           \"type\": \"repository\",           \"name\": \"dogslow\",           \"full_name\": \"evzijst/dogslow\",           \"uuid\": \"{988b17c6-1a47-4e70-84ee-854d5f012bf6}\"         },         \"title\": \"Updated title\"       },       \"created_on\": \"2018-03-03T00:35:28.353630+00:00\",       \"user\": {         \"username\": \"evzijst\",         \"nickname\": \"evzijst\",         \"display_name\": \"evzijst\",         \"type\": \"user\",         \"uuid\": \"{aaa7972b-38af-4fb1-802d-6e3854c95778}\",         \"links\": {           \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/users/evzijst\"           },           \"html\": {             \"href\": \"https://bitbucket.org/evzijst/\"           },           \"avatar\": {             \"href\": \"https://bitbucket.org/account/evzijst/avatar/32/\"           }         }       },       \"message\": {         \"raw\": \"Removed assignee, changed kind and priority.\",         \"markup\": \"markdown\",         \"html\": \"<p>Removed assignee, changed kind and priority.</p>\",         \"type\": \"rendered\"       },       \"type\": \"issue_change\",       \"id\": 2     }   ],   \"page\": 1 } ```  Changes support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) that can be used to search for specific changes. For instance, to see when an issue transitioned to \"resolved\":  ``` $ curl -s https://api.bitbucket.org/2.0/repositories/site/master/issues/1/changes \\    -G --data-urlencode='q=changes.state.new = \"resolved\"' ```  This resource is only available on repositories that have the issue tracker enabled.  N.B.  The `changes.assignee` and `changes.assignee_account_id` fields are not a `user` object. Instead, they contain the raw `username` and `account_id` of the user. This is to protect the integrity of the audit log even after a user account gets deleted.  The `changes.assignee` field is deprecated will disappear in the future. Use `changes.assignee_account_id` instead.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
    # @option opts [String] :sort  Name of a response property to sort results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results) for details. 
    # @return [PaginatedLogEntries]
    def repositories_workspace_repo_slug_issues_issue_id_changes_get(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_changes_get_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # List changes on an issue
    # Returns the list of all changes that have been made to the specified issue. Changes are returned in chronological order with the oldest change first.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.  Note that this operation is changing significantly, due to privacy changes. See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-the-issue-changes-api) for details.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes - | jq .  {   \&quot;pagelen\&quot;: 20,   \&quot;values\&quot;: [     {       \&quot;changes\&quot;: {         \&quot;priority\&quot;: {           \&quot;new\&quot;: \&quot;trivial\&quot;,           \&quot;old\&quot;: \&quot;major\&quot;         },         \&quot;assignee\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;evzijst\&quot;         },         \&quot;assignee_account_id\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;         },         \&quot;kind\&quot;: {           \&quot;new\&quot;: \&quot;enhancement\&quot;,           \&quot;old\&quot;: \&quot;bug\&quot;         }       },       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes/2\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/issues/1#comment-2\&quot;         }       },       \&quot;issue\&quot;: {         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1\&quot;           }         },         \&quot;type\&quot;: \&quot;issue\&quot;,         \&quot;id\&quot;: 1,         \&quot;repository\&quot;: {           \&quot;links\&quot;: {             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow\&quot;             },             \&quot;avatar\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/avatar/32/\&quot;             }           },           \&quot;type\&quot;: \&quot;repository\&quot;,           \&quot;name\&quot;: \&quot;dogslow\&quot;,           \&quot;full_name\&quot;: \&quot;evzijst/dogslow\&quot;,           \&quot;uuid\&quot;: \&quot;{988b17c6-1a47-4e70-84ee-854d5f012bf6}\&quot;         },         \&quot;title\&quot;: \&quot;Updated title\&quot;       },       \&quot;created_on\&quot;: \&quot;2018-03-03T00:35:28.353630+00:00\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;evzijst\&quot;,         \&quot;nickname\&quot;: \&quot;evzijst\&quot;,         \&quot;display_name\&quot;: \&quot;evzijst\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{aaa7972b-38af-4fb1-802d-6e3854c95778}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/evzijst\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/evzijst/avatar/32/\&quot;           }         }       },       \&quot;message\&quot;: {         \&quot;raw\&quot;: \&quot;Removed assignee, changed kind and priority.\&quot;,         \&quot;markup\&quot;: \&quot;markdown\&quot;,         \&quot;html\&quot;: \&quot;&lt;p&gt;Removed assignee, changed kind and priority.&lt;/p&gt;\&quot;,         \&quot;type\&quot;: \&quot;rendered\&quot;       },       \&quot;type\&quot;: \&quot;issue_change\&quot;,       \&quot;id\&quot;: 2     }   ],   \&quot;page\&quot;: 1 } &#x60;&#x60;&#x60;  Changes support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) that can be used to search for specific changes. For instance, to see when an issue transitioned to \&quot;resolved\&quot;:  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/site/master/issues/1/changes \\    -G --data-urlencode&#x3D;&#39;q&#x3D;changes.state.new &#x3D; \&quot;resolved\&quot;&#39; &#x60;&#x60;&#x60;  This resource is only available on repositories that have the issue tracker enabled.  N.B.  The &#x60;changes.assignee&#x60; and &#x60;changes.assignee_account_id&#x60; fields are not a &#x60;user&#x60; object. Instead, they contain the raw &#x60;username&#x60; and &#x60;account_id&#x60; of the user. This is to protect the integrity of the audit log even after a user account gets deleted.  The &#x60;changes.assignee&#x60; field is deprecated will disappear in the future. Use &#x60;changes.assignee_account_id&#x60; instead.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
    # @option opts [String] :sort  Name of a response property to sort results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results) for details. 
    # @return [Array<(PaginatedLogEntries, Integer, Hash)>] PaginatedLogEntries data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_changes_get_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedLogEntries'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_changes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify the state of an issue
    # Makes a change to the specified issue.  For example, to change an issue's state and assignee, create a new change object that modifies these fields:  ``` curl https://api.bitbucket.org/2.0/site/master/issues/1234/changes \\   -s -u evzijst -X POST -H \"Content-Type: application/json\" \\   -d '{     \"changes\": {       \"assignee_account_id\": {         \"new\": \"557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\"       },       \"state\": {         \"new\": 'resolved\"       }     }     \"message\": {       \"raw\": \"This is now resolved.\"     }   }' ```  The above example also includes a custom comment to go alongside the change. This comment will also be visible on the issue page in the UI.  The fields of the `changes` object are strings, not objects. This allows for immutable change log records, even after user accounts, milestones, or other objects recorded in a change entry, get renamed or deleted.  The `assignee_account_id` field stores the account id. When POSTing a new change and changing the assignee, the client should therefore use the user's account_id in the `changes.assignee_account_id.new` field.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param request_body [Hash<String, Object>] The new issue state change. The only required elements are &#x60;changes.[].new&#x60;. All other elements can be omitted from the body.
    # @param [Hash] opts the optional parameters
    # @return [IssueChange]
    def repositories_workspace_repo_slug_issues_issue_id_changes_post(issue_id, repo_slug, workspace, request_body, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_changes_post_with_http_info(issue_id, repo_slug, workspace, request_body, opts)
      data
    end

    # Modify the state of an issue
    # Makes a change to the specified issue.  For example, to change an issue&#39;s state and assignee, create a new change object that modifies these fields:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/site/master/issues/1234/changes \\   -s -u evzijst -X POST -H \&quot;Content-Type: application/json\&quot; \\   -d &#39;{     \&quot;changes\&quot;: {       \&quot;assignee_account_id\&quot;: {         \&quot;new\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;       },       \&quot;state\&quot;: {         \&quot;new\&quot;: &#39;resolved\&quot;       }     }     \&quot;message\&quot;: {       \&quot;raw\&quot;: \&quot;This is now resolved.\&quot;     }   }&#39; &#x60;&#x60;&#x60;  The above example also includes a custom comment to go alongside the change. This comment will also be visible on the issue page in the UI.  The fields of the &#x60;changes&#x60; object are strings, not objects. This allows for immutable change log records, even after user accounts, milestones, or other objects recorded in a change entry, get renamed or deleted.  The &#x60;assignee_account_id&#x60; field stores the account id. When POSTing a new change and changing the assignee, the client should therefore use the user&#39;s account_id in the &#x60;changes.assignee_account_id.new&#x60; field.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param request_body [Hash<String, Object>] The new issue state change. The only required elements are &#x60;changes.[].new&#x60;. All other elements can be omitted from the body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueChange, Integer, Hash)>] IssueChange data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_changes_post_with_http_info(issue_id, repo_slug, workspace, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_post ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_post"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'IssueChange'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_changes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_changes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a comment on an issue
    # Deletes the specified comment.
    # @param comment_id [Integer] The id of the comment.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete(comment_id, issue_id, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete_with_http_info(comment_id, issue_id, repo_slug, workspace, opts)
      nil
    end

    # Delete a comment on an issue
    # Deletes the specified comment.
    # @param comment_id [Integer] The id of the comment.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete_with_http_info(comment_id, issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete"
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}'.sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s)).sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a comment on an issue
    # Returns the specified issue comment object.
    # @param comment_id [Integer] The id of the comment.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [IssueComment]
    def repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get(comment_id, issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get_with_http_info(comment_id, issue_id, repo_slug, workspace, opts)
      data
    end

    # Get a comment on an issue
    # Returns the specified issue comment object.
    # @param comment_id [Integer] The id of the comment.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueComment, Integer, Hash)>] IssueComment data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get_with_http_info(comment_id, issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get"
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}'.sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s)).sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a comment on an issue
    # Updates the content of the specified issue comment. Note that only the `content.raw` field can be modified.  ``` $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \\   -X PUT -u evzijst \\   -H 'Content-Type: application/json' \\   -d '{\"content\": {\"raw\": \"Lorem ipsum.\"}' ```
    # @param comment_id [Integer] The id of the comment.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param issue_comment [IssueComment] The updated comment.
    # @param [Hash] opts the optional parameters
    # @return [IssueComment]
    def repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put(comment_id, issue_id, repo_slug, workspace, issue_comment, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put_with_http_info(comment_id, issue_id, repo_slug, workspace, issue_comment, opts)
      data
    end

    # Update a comment on an issue
    # Updates the content of the specified issue comment. Note that only the &#x60;content.raw&#x60; field can be modified.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \\   -X PUT -u evzijst \\   -H &#39;Content-Type: application/json&#39; \\   -d &#39;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}&#39; &#x60;&#x60;&#x60;
    # @param comment_id [Integer] The id of the comment.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param issue_comment [IssueComment] The updated comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueComment, Integer, Hash)>] IssueComment data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put_with_http_info(comment_id, issue_id, repo_slug, workspace, issue_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put"
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put"
      end
      # verify the required parameter 'issue_comment' is set
      if @api_client.config.client_side_validation && issue_comment.nil?
        fail ArgumentError, "Missing the required parameter 'issue_comment' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}'.sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s)).sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issue_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'IssueComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_comments_comment_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List comments on an issue
    # Returns a paginated list of all comments that were made on the specified issue.  The default sorting is oldest to newest and can be overridden with the `sort` query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @return [PaginatedIssueComments]
    def repositories_workspace_repo_slug_issues_issue_id_comments_get(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_comments_get_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # List comments on an issue
    # Returns a paginated list of all comments that were made on the specified issue.  The default sorting is oldest to newest and can be overridden with the &#x60;sort&#x60; query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @return [Array<(PaginatedIssueComments, Integer, Hash)>] PaginatedIssueComments data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_comments_get_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedIssueComments'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_comments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a comment on an issue
    # Creates a new issue comment.  ``` $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \\   -X POST -u evzijst \\   -H 'Content-Type: application/json' \\   -d '{\"content\": {\"raw\": \"Lorem ipsum.\"}}' ```
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param issue_comment [IssueComment] The new issue comment object.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_issues_issue_id_comments_post(issue_id, repo_slug, workspace, issue_comment, opts = {})
      repositories_workspace_repo_slug_issues_issue_id_comments_post_with_http_info(issue_id, repo_slug, workspace, issue_comment, opts)
      nil
    end

    # Create a comment on an issue
    # Creates a new issue comment.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \\   -X POST -u evzijst \\   -H &#39;Content-Type: application/json&#39; \\   -d &#39;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}}&#39; &#x60;&#x60;&#x60;
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param issue_comment [IssueComment] The new issue comment object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_comments_post_with_http_info(issue_id, repo_slug, workspace, issue_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_post ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_post"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_post"
      end
      # verify the required parameter 'issue_comment' is set
      if @api_client.config.client_side_validation && issue_comment.nil?
        fail ArgumentError, "Missing the required parameter 'issue_comment' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issue_comment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_comments_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_comments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an issue
    # Deletes the specified issue. This requires write access to the repository.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def repositories_workspace_repo_slug_issues_issue_id_delete(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_delete_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Delete an issue
    # Deletes the specified issue. This requires write access to the repository.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_delete_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_delete ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an issue
    # Returns the specified issue.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def repositories_workspace_repo_slug_issues_issue_id_get(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_get_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Get an issue
    # Returns the specified issue.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_get_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an issue
    # Modifies the issue.  ``` $ curl https://api.bitbucket.org/2.0/repostories/evzijst/dogslow/issues/123 \\   -u evzijst -s -X PUT -H 'Content-Type: application/json' \\   -d '{   \"title\": \"Updated title\",   \"assignee\": {     \"account_id\": \"5d5355e8c6b9320d9ea5b28d\"   },   \"priority\": \"minor\",   \"version\": {     \"name\": \"1.0\"   },   \"component\": null }' ```  This example changes the `title`, `assignee`, `priority` and the `version`. It also removes the value of the `component` from the issue by setting the field to `null`. Any field not present keeps its existing value.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the `/issues/123/changes` endpoint. It also has a comment associated with the change.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def repositories_workspace_repo_slug_issues_issue_id_put(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_put_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Update an issue
    # Modifies the issue.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repostories/evzijst/dogslow/issues/123 \\   -u evzijst -s -X PUT -H &#39;Content-Type: application/json&#39; \\   -d &#39;{   \&quot;title\&quot;: \&quot;Updated title\&quot;,   \&quot;assignee\&quot;: {     \&quot;account_id\&quot;: \&quot;5d5355e8c6b9320d9ea5b28d\&quot;   },   \&quot;priority\&quot;: \&quot;minor\&quot;,   \&quot;version\&quot;: {     \&quot;name\&quot;: \&quot;1.0\&quot;   },   \&quot;component\&quot;: null }&#39; &#x60;&#x60;&#x60;  This example changes the &#x60;title&#x60;, &#x60;assignee&#x60;, &#x60;priority&#x60; and the &#x60;version&#x60;. It also removes the value of the &#x60;component&#x60; from the issue by setting the field to &#x60;null&#x60;. Any field not present keeps its existing value.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_put_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_put ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_put"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_put"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove vote for an issue
    # Retract your vote.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Error]
    def repositories_workspace_repo_slug_issues_issue_id_vote_delete(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_vote_delete_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Remove vote for an issue
    # Retract your vote.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_vote_delete_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_delete ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_vote_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if current user voted for an issue
    # Check whether the authenticated user has voted for this issue. A 204 status code indicates that the user has voted, while a 404 implies they haven't.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Error]
    def repositories_workspace_repo_slug_issues_issue_id_vote_get(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_vote_get_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Check if current user voted for an issue
    # Check whether the authenticated user has voted for this issue. A 204 status code indicates that the user has voted, while a 404 implies they haven&#39;t.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_vote_get_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_vote_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Vote for an issue
    # Vote for this issue.  To cast your vote, do an empty PUT. The 204 status code indicates that the operation was successful.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Error]
    def repositories_workspace_repo_slug_issues_issue_id_vote_put(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_vote_put_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Vote for an issue
    # Vote for this issue.  To cast your vote, do an empty PUT. The 204 status code indicates that the operation was successful.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_vote_put_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_put ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_put"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_put"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_vote_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_vote_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop watching an issue
    # Stop watching this issue.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Error]
    def repositories_workspace_repo_slug_issues_issue_id_watch_delete(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_watch_delete_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Stop watching an issue
    # Stop watching this issue.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_watch_delete_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_delete ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_watch_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if current user is watching a issue
    # Indicated whether or not the authenticated user is watching this issue.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Error]
    def repositories_workspace_repo_slug_issues_issue_id_watch_get(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_watch_get_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Check if current user is watching a issue
    # Indicated whether or not the authenticated user is watching this issue.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_watch_get_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_get ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_watch_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Watch an issue
    # Start watching this issue.  To start watching this issue, do an empty PUT. The 204 status code indicates that the operation was successful.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Error]
    def repositories_workspace_repo_slug_issues_issue_id_watch_put(issue_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_issue_id_watch_put_with_http_info(issue_id, repo_slug, workspace, opts)
      data
    end

    # Watch an issue
    # Start watching this issue.  To start watching this issue, do an empty PUT. The 204 status code indicates that the operation was successful.
    # @param issue_id [String] The issue id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def repositories_workspace_repo_slug_issues_issue_id_watch_put_with_http_info(issue_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_put ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_put"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_put"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch'.sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_issue_id_watch_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_issue_id_watch_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an issue
    # Creates a new issue.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.  The authenticated user is used for the issue's `reporter` field.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param issue [Issue] The new issue. The only required element is &#x60;title&#x60;. All other elements can be omitted from the body.
    # @param [Hash] opts the optional parameters
    # @return [Issue]
    def repositories_workspace_repo_slug_issues_post(repo_slug, workspace, issue, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_issues_post_with_http_info(repo_slug, workspace, issue, opts)
      data
    end

    # Create an issue
    # Creates a new issue.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.  The authenticated user is used for the issue&#39;s &#x60;reporter&#x60; field.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param issue [Issue] The new issue. The only required element is &#x60;title&#x60;. All other elements can be omitted from the body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Issue, Integer, Hash)>] Issue data, response status code and response headers
    def repositories_workspace_repo_slug_issues_post_with_http_info(repo_slug, workspace, issue, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_issues_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_post"
      end
      # verify the required parameter 'issue' is set
      if @api_client.config.client_side_validation && issue.nil?
        fail ArgumentError, "Missing the required parameter 'issue' when calling IssueTrackerApi.repositories_workspace_repo_slug_issues_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/issues'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(issue)

      # return_type
      return_type = opts[:debug_return_type] || 'Issue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_issues_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_issues_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List milestones
    # Returns the milestones that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedMilestones]
    def repositories_workspace_repo_slug_milestones_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_milestones_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List milestones
    # Returns the milestones that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedMilestones, Integer, Hash)>] PaginatedMilestones data, response status code and response headers
    def repositories_workspace_repo_slug_milestones_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_milestones_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_milestones_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_milestones_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/milestones'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedMilestones'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_milestones_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_milestones_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a milestone
    # Returns the specified issue tracker milestone object.
    # @param milestone_id [Integer] The milestone&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Milestone]
    def repositories_workspace_repo_slug_milestones_milestone_id_get(milestone_id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_milestones_milestone_id_get_with_http_info(milestone_id, repo_slug, workspace, opts)
      data
    end

    # Get a milestone
    # Returns the specified issue tracker milestone object.
    # @param milestone_id [Integer] The milestone&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def repositories_workspace_repo_slug_milestones_milestone_id_get_with_http_info(milestone_id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_milestones_milestone_id_get ...'
      end
      # verify the required parameter 'milestone_id' is set
      if @api_client.config.client_side_validation && milestone_id.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_milestones_milestone_id_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_milestones_milestone_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_milestones_milestone_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/milestones/{milestone_id}'.sub('{' + 'milestone_id' + '}', CGI.escape(milestone_id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_milestones_milestone_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_milestones_milestone_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List defined versions for issues
    # Returns the versions that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [PaginatedVersions]
    def repositories_workspace_repo_slug_versions_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_versions_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List defined versions for issues
    # Returns the versions that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedVersions, Integer, Hash)>] PaginatedVersions data, response status code and response headers
    def repositories_workspace_repo_slug_versions_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_versions_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_versions_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_versions_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/versions'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedVersions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a defined version for issues
    # Returns the specified issue tracker version object.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param version_id [Integer] The version&#39;s id
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def repositories_workspace_repo_slug_versions_version_id_get(repo_slug, version_id, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_versions_version_id_get_with_http_info(repo_slug, version_id, workspace, opts)
      data
    end

    # Get a defined version for issues
    # Returns the specified issue tracker version object.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param version_id [Integer] The version&#39;s id
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def repositories_workspace_repo_slug_versions_version_id_get_with_http_info(repo_slug, version_id, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IssueTrackerApi.repositories_workspace_repo_slug_versions_version_id_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling IssueTrackerApi.repositories_workspace_repo_slug_versions_version_id_get"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IssueTrackerApi.repositories_workspace_repo_slug_versions_version_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling IssueTrackerApi.repositories_workspace_repo_slug_versions_version_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/versions/{version_id}'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Version'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"IssueTrackerApi.repositories_workspace_repo_slug_versions_version_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IssueTrackerApi#repositories_workspace_repo_slug_versions_version_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
