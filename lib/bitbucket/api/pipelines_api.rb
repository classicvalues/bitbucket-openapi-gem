=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module Bitbucket
  class PipelinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a variable for an environment
    # Create a deployment environment level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param deployment_variable [DeploymentVariable] The variable to create
    # @param [Hash] opts the optional parameters
    # @return [DeploymentVariable]
    def create_deployment_variable(workspace, repo_slug, environment_uuid, deployment_variable, opts = {})
      data, _status_code, _headers = create_deployment_variable_with_http_info(workspace, repo_slug, environment_uuid, deployment_variable, opts)
      data
    end

    # Create a variable for an environment
    # Create a deployment environment level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param deployment_variable [DeploymentVariable] The variable to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentVariable, Integer, Hash)>] DeploymentVariable data, response status code and response headers
    def create_deployment_variable_with_http_info(workspace, repo_slug, environment_uuid, deployment_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_deployment_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.create_deployment_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.create_deployment_variable"
      end
      # verify the required parameter 'environment_uuid' is set
      if @api_client.config.client_side_validation && environment_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'environment_uuid' when calling PipelinesApi.create_deployment_variable"
      end
      # verify the required parameter 'deployment_variable' is set
      if @api_client.config.client_side_validation && deployment_variable.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_variable' when calling PipelinesApi.create_deployment_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'environment_uuid' + '}', CGI.escape(environment_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(deployment_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'DeploymentVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_deployment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_deployment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run a pipeline
    # Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d '   {     \"target\": {       \"ref_type\": \"branch\",       \"type\": \"pipeline_ref_target\",       \"ref_name\": \"master\"     }   }' ``` # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * `branch` * `named_branch` * `bookmark`  * `tag`  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d '   {     \"target\": {       \"commit\": {         \"type\": \"commit\",         \"hash\": \"ce5b7431602f7cbba007062eeb55225c6e18e956\"       },       \"ref_type\": \"branch\",       \"type\": \"pipeline_ref_target\",       \"ref_name\": \"master\"     }   }' ``` # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d '   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },         \"selector\": {            \"type\":\"custom\",               \"pattern\":\"Deploy to production\"           },         \"type\":\"pipeline_commit_target\"    }   }' ``` # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d '   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },        \"selector\": {           \"type\": \"custom\",           \"pattern\": \"Deploy to production\"        },        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\",        \"ref_type\": \"branch\"      }   }' ```   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your `bitbucket-pipelines.yml` file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d '   {     \"target\": {       \"type\": \"pipeline_ref_target\",       \"ref_type\": \"branch\",       \"ref_name\": \"master\",       \"selector\": {         \"type\": \"custom\",         \"pattern\": \"Deploy to production\"       }     },     \"variables\": [       {         \"key\": \"var1key\",         \"value\": \"var1value\",         \"secured\": true       },       {         \"key\": \"var2key\",         \"value\": \"var2value\"       }     ]   }' ```  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d '   {  \"target\": {       \"type\": \"pipeline_pullrequest_target\",    \"source\": \"pull-request-branch\",       \"destination\": \"master\",       \"destination_commit\": {         \"hash\" : \"9f848b7\"       },       \"commit\": {        \"hash\" : \"1a372fc\"       },       \"pullrequest\" : {        \"id\" : \"3\"       },    \"selector\": {         \"type\": \"pull-requests\",         \"pattern\": \"**\"       }     }   }' ``` 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline [Pipeline] The pipeline to initiate.
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def create_pipeline_for_repository(workspace, repo_slug, pipeline, opts = {})
      data, _status_code, _headers = create_pipeline_for_repository_with_http_info(workspace, repo_slug, pipeline, opts)
      data
    end

    # Run a pipeline
    # Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#39; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#39; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#39; &#x60;&#x60;&#x60; 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline [Pipeline] The pipeline to initiate.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def create_pipeline_for_repository_with_http_info(workspace, repo_slug, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_pipeline_for_repository ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.create_pipeline_for_repository"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.create_pipeline_for_repository"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling PipelinesApi.create_pipeline_for_repository"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline)

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_pipeline_for_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_pipeline_for_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a variable for a user
    # Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineVariable] :pipeline_variable The variable to create.
    # @return [PipelineVariable]
    def create_pipeline_variable_for_team(username, opts = {})
      data, _status_code, _headers = create_pipeline_variable_for_team_with_http_info(username, opts)
      data
    end

    # Create a variable for a user
    # Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineVariable] :pipeline_variable The variable to create.
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def create_pipeline_variable_for_team_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_pipeline_variable_for_team ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PipelinesApi.create_pipeline_variable_for_team"
      end
      # resource path
      local_var_path = '/teams/{username}/pipelines_config/variables/'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pipeline_variable'])

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_pipeline_variable_for_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_pipeline_variable_for_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a variable for a user
    # Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineVariable] :pipeline_variable The variable to create.
    # @return [PipelineVariable]
    def create_pipeline_variable_for_user(selected_user, opts = {})
      data, _status_code, _headers = create_pipeline_variable_for_user_with_http_info(selected_user, opts)
      data
    end

    # Create a variable for a user
    # Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineVariable] :pipeline_variable The variable to create.
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def create_pipeline_variable_for_user_with_http_info(selected_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_pipeline_variable_for_user ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PipelinesApi.create_pipeline_variable_for_user"
      end
      # resource path
      local_var_path = '/users/{selected_user}/pipelines_config/variables/'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pipeline_variable'])

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_pipeline_variable_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_pipeline_variable_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a variable for a workspace
    # Create a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineVariable] :pipeline_variable The variable to create.
    # @return [PipelineVariable]
    def create_pipeline_variable_for_workspace(workspace, opts = {})
      data, _status_code, _headers = create_pipeline_variable_for_workspace_with_http_info(workspace, opts)
      data
    end

    # Create a variable for a workspace
    # Create a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineVariable] :pipeline_variable The variable to create.
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def create_pipeline_variable_for_workspace_with_http_info(workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_pipeline_variable_for_workspace ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.create_pipeline_variable_for_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/variables'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pipeline_variable'])

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_pipeline_variable_for_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_pipeline_variable_for_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a known host
    # Create a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_known_host [PipelineKnownHost] The known host to create.
    # @param [Hash] opts the optional parameters
    # @return [PipelineKnownHost]
    def create_repository_pipeline_known_host(workspace, repo_slug, pipeline_known_host, opts = {})
      data, _status_code, _headers = create_repository_pipeline_known_host_with_http_info(workspace, repo_slug, pipeline_known_host, opts)
      data
    end

    # Create a known host
    # Create a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_known_host [PipelineKnownHost] The known host to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineKnownHost, Integer, Hash)>] PipelineKnownHost data, response status code and response headers
    def create_repository_pipeline_known_host_with_http_info(workspace, repo_slug, pipeline_known_host, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_repository_pipeline_known_host ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.create_repository_pipeline_known_host"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.create_repository_pipeline_known_host"
      end
      # verify the required parameter 'pipeline_known_host' is set
      if @api_client.config.client_side_validation && pipeline_known_host.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_known_host' when calling PipelinesApi.create_repository_pipeline_known_host"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_known_host)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineKnownHost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_repository_pipeline_known_host",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_repository_pipeline_known_host\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a schedule
    # Create a schedule for the given repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_schedule [PipelineSchedule] The schedule to create.
    # @param [Hash] opts the optional parameters
    # @return [PipelineSchedule]
    def create_repository_pipeline_schedule(workspace, repo_slug, pipeline_schedule, opts = {})
      data, _status_code, _headers = create_repository_pipeline_schedule_with_http_info(workspace, repo_slug, pipeline_schedule, opts)
      data
    end

    # Create a schedule
    # Create a schedule for the given repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_schedule [PipelineSchedule] The schedule to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineSchedule, Integer, Hash)>] PipelineSchedule data, response status code and response headers
    def create_repository_pipeline_schedule_with_http_info(workspace, repo_slug, pipeline_schedule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_repository_pipeline_schedule ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.create_repository_pipeline_schedule"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.create_repository_pipeline_schedule"
      end
      # verify the required parameter 'pipeline_schedule' is set
      if @api_client.config.client_side_validation && pipeline_schedule.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_schedule' when calling PipelinesApi.create_repository_pipeline_schedule"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_schedule)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineSchedule'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_repository_pipeline_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_repository_pipeline_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a variable for a repository
    # Create a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_variable [PipelineVariable] The variable to create.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def create_repository_pipeline_variable(workspace, repo_slug, pipeline_variable, opts = {})
      data, _status_code, _headers = create_repository_pipeline_variable_with_http_info(workspace, repo_slug, pipeline_variable, opts)
      data
    end

    # Create a variable for a repository
    # Create a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_variable [PipelineVariable] The variable to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def create_repository_pipeline_variable_with_http_info(workspace, repo_slug, pipeline_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_repository_pipeline_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.create_repository_pipeline_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.create_repository_pipeline_variable"
      end
      # verify the required parameter 'pipeline_variable' is set
      if @api_client.config.client_side_validation && pipeline_variable.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_variable' when calling PipelinesApi.create_repository_pipeline_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_repository_pipeline_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_repository_pipeline_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a variable for an environment
    # Delete a deployment environment level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_deployment_variable(workspace, repo_slug, environment_uuid, variable_uuid, opts = {})
      delete_deployment_variable_with_http_info(workspace, repo_slug, environment_uuid, variable_uuid, opts)
      nil
    end

    # Delete a variable for an environment
    # Delete a deployment environment level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_deployment_variable_with_http_info(workspace, repo_slug, environment_uuid, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_deployment_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_deployment_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_deployment_variable"
      end
      # verify the required parameter 'environment_uuid' is set
      if @api_client.config.client_side_validation && environment_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'environment_uuid' when calling PipelinesApi.delete_deployment_variable"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.delete_deployment_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'environment_uuid' + '}', CGI.escape(environment_uuid.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_deployment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_deployment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a variable for a team
    # Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pipeline_variable_for_team(username, variable_uuid, opts = {})
      delete_pipeline_variable_for_team_with_http_info(username, variable_uuid, opts)
      nil
    end

    # Delete a variable for a team
    # Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pipeline_variable_for_team_with_http_info(username, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_pipeline_variable_for_team ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PipelinesApi.delete_pipeline_variable_for_team"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.delete_pipeline_variable_for_team"
      end
      # resource path
      local_var_path = '/teams/{username}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_pipeline_variable_for_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_pipeline_variable_for_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a variable for a user
    # Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pipeline_variable_for_user(selected_user, variable_uuid, opts = {})
      delete_pipeline_variable_for_user_with_http_info(selected_user, variable_uuid, opts)
      nil
    end

    # Delete a variable for a user
    # Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pipeline_variable_for_user_with_http_info(selected_user, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_pipeline_variable_for_user ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PipelinesApi.delete_pipeline_variable_for_user"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.delete_pipeline_variable_for_user"
      end
      # resource path
      local_var_path = '/users/{selected_user}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_pipeline_variable_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_pipeline_variable_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a variable for a workspace
    # Delete a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pipeline_variable_for_workspace(workspace, variable_uuid, opts = {})
      delete_pipeline_variable_for_workspace_with_http_info(workspace, variable_uuid, opts)
      nil
    end

    # Delete a variable for a workspace
    # Delete a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pipeline_variable_for_workspace_with_http_info(workspace, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_pipeline_variable_for_workspace ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_pipeline_variable_for_workspace"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.delete_pipeline_variable_for_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_pipeline_variable_for_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_pipeline_variable_for_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a cache
    # Delete a repository cache.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param cache_uuid [String] The UUID of the cache to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_pipeline_cache(workspace, repo_slug, cache_uuid, opts = {})
      delete_repository_pipeline_cache_with_http_info(workspace, repo_slug, cache_uuid, opts)
      nil
    end

    # Delete a cache
    # Delete a repository cache.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param cache_uuid [String] The UUID of the cache to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_pipeline_cache_with_http_info(workspace, repo_slug, cache_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_repository_pipeline_cache ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_repository_pipeline_cache"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_repository_pipeline_cache"
      end
      # verify the required parameter 'cache_uuid' is set
      if @api_client.config.client_side_validation && cache_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'cache_uuid' when calling PipelinesApi.delete_repository_pipeline_cache"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines-config/caches/{cache_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'cache_uuid' + '}', CGI.escape(cache_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_repository_pipeline_cache",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_repository_pipeline_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete caches
    # Delete repository cache versions by name.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param name [String] The cache name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_pipeline_caches(workspace, repo_slug, name, opts = {})
      delete_repository_pipeline_caches_with_http_info(workspace, repo_slug, name, opts)
      nil
    end

    # Delete caches
    # Delete repository cache versions by name.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param name [String] The cache name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_pipeline_caches_with_http_info(workspace, repo_slug, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_repository_pipeline_caches ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_repository_pipeline_caches"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_repository_pipeline_caches"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelinesApi.delete_repository_pipeline_caches"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines-config/caches'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_repository_pipeline_caches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_repository_pipeline_caches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SSH key pair
    # Delete the repository SSH key pair.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_pipeline_key_pair(workspace, repo_slug, opts = {})
      delete_repository_pipeline_key_pair_with_http_info(workspace, repo_slug, opts)
      nil
    end

    # Delete SSH key pair
    # Delete the repository SSH key pair.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_pipeline_key_pair_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_repository_pipeline_key_pair ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_repository_pipeline_key_pair"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_repository_pipeline_key_pair"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_repository_pipeline_key_pair",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_repository_pipeline_key_pair\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a known host
    # Delete a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param known_host_uuid [String] The UUID of the known host to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_pipeline_known_host(workspace, repo_slug, known_host_uuid, opts = {})
      delete_repository_pipeline_known_host_with_http_info(workspace, repo_slug, known_host_uuid, opts)
      nil
    end

    # Delete a known host
    # Delete a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param known_host_uuid [String] The UUID of the known host to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_pipeline_known_host_with_http_info(workspace, repo_slug, known_host_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_repository_pipeline_known_host ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_repository_pipeline_known_host"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_repository_pipeline_known_host"
      end
      # verify the required parameter 'known_host_uuid' is set
      if @api_client.config.client_side_validation && known_host_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'known_host_uuid' when calling PipelinesApi.delete_repository_pipeline_known_host"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'known_host_uuid' + '}', CGI.escape(known_host_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_repository_pipeline_known_host",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_repository_pipeline_known_host\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a schedule
    # Delete a schedule.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_pipeline_schedule(workspace, repo_slug, schedule_uuid, opts = {})
      delete_repository_pipeline_schedule_with_http_info(workspace, repo_slug, schedule_uuid, opts)
      nil
    end

    # Delete a schedule
    # Delete a schedule.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_pipeline_schedule_with_http_info(workspace, repo_slug, schedule_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_repository_pipeline_schedule ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_repository_pipeline_schedule"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_repository_pipeline_schedule"
      end
      # verify the required parameter 'schedule_uuid' is set
      if @api_client.config.client_side_validation && schedule_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_uuid' when calling PipelinesApi.delete_repository_pipeline_schedule"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'schedule_uuid' + '}', CGI.escape(schedule_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_repository_pipeline_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_repository_pipeline_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a variable for a repository
    # Delete a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_repository_pipeline_variable(workspace, repo_slug, variable_uuid, opts = {})
      delete_repository_pipeline_variable_with_http_info(workspace, repo_slug, variable_uuid, opts)
      nil
    end

    # Delete a variable for a repository
    # Delete a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param variable_uuid [String] The UUID of the variable to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_repository_pipeline_variable_with_http_info(workspace, repo_slug, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_repository_pipeline_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.delete_repository_pipeline_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.delete_repository_pipeline_variable"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.delete_repository_pipeline_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_repository_pipeline_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_repository_pipeline_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List variables for an environment
    # Find deployment environment level variables.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedDeploymentVariable]
    def get_deployment_variables(workspace, repo_slug, environment_uuid, opts = {})
      data, _status_code, _headers = get_deployment_variables_with_http_info(workspace, repo_slug, environment_uuid, opts)
      data
    end

    # List variables for an environment
    # Find deployment environment level variables.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedDeploymentVariable, Integer, Hash)>] PaginatedDeploymentVariable data, response status code and response headers
    def get_deployment_variables_with_http_info(workspace, repo_slug, environment_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_deployment_variables ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_deployment_variables"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_deployment_variables"
      end
      # verify the required parameter 'environment_uuid' is set
      if @api_client.config.client_side_validation && environment_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'environment_uuid' when calling PipelinesApi.get_deployment_variables"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'environment_uuid' + '}', CGI.escape(environment_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedDeploymentVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_deployment_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_deployment_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get OpenID configuration for OIDC in Pipelines
    # This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_oidc_configuration(workspace, opts = {})
      get_oidc_configuration_with_http_info(workspace, opts)
      nil
    end

    # Get OpenID configuration for OIDC in Pipelines
    # This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_oidc_configuration_with_http_info(workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_oidc_configuration ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_oidc_configuration"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/identity/oidc/.well-known/openid-configuration'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_oidc_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_oidc_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get keys for OIDC in Pipelines
    # This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_oidc_keys(workspace, opts = {})
      get_oidc_keys_with_http_info(workspace, opts)
      nil
    end

    # Get keys for OIDC in Pipelines
    # This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_oidc_keys_with_http_info(workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_oidc_keys ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_oidc_keys"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/identity/oidc/keys.json'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_oidc_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_oidc_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the logs for the build container or a service container for a given step of a pipeline.
    # Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param log_uuid [String] For the main build container specify the step UUID; for a service container specify the service container UUID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_pipeline_container_log(workspace, repo_slug, pipeline_uuid, step_uuid, log_uuid, opts = {})
      get_pipeline_container_log_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, log_uuid, opts)
      nil
    end

    # Get the logs for the build container or a service container for a given step of a pipeline.
    # Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param log_uuid [String] For the main build container specify the step UUID; for a service container specify the service container UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_pipeline_container_log_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, log_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_container_log ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_container_log"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_container_log"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_container_log"
      end
      # verify the required parameter 'step_uuid' is set
      if @api_client.config.client_side_validation && step_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'step_uuid' when calling PipelinesApi.get_pipeline_container_log"
      end
      # verify the required parameter 'log_uuid' is set
      if @api_client.config.client_side_validation && log_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'log_uuid' when calling PipelinesApi.get_pipeline_container_log"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/logs/{log_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s)).sub('{' + 'step_uuid' + '}', CGI.escape(step_uuid.to_s)).sub('{' + 'log_uuid' + '}', CGI.escape(log_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_container_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_container_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a pipeline
    # Retrieve a specified pipeline
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The pipeline UUID.
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def get_pipeline_for_repository(workspace, repo_slug, pipeline_uuid, opts = {})
      data, _status_code, _headers = get_pipeline_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, opts)
      data
    end

    # Get a pipeline
    # Retrieve a specified pipeline
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The pipeline UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_pipeline_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_for_repository ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_for_repository"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_for_repository"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_for_repository"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_for_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_for_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a step of a pipeline
    # Retrieve a given step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [PipelineStep]
    def get_pipeline_step_for_repository(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      data, _status_code, _headers = get_pipeline_step_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts)
      data
    end

    # Get a step of a pipeline
    # Retrieve a given step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineStep, Integer, Hash)>] PipelineStep data, response status code and response headers
    def get_pipeline_step_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_step_for_repository ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_step_for_repository"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_step_for_repository"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_step_for_repository"
      end
      # verify the required parameter 'step_uuid' is set
      if @api_client.config.client_side_validation && step_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'step_uuid' when calling PipelinesApi.get_pipeline_step_for_repository"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s)).sub('{' + 'step_uuid' + '}', CGI.escape(step_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineStep'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_step_for_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_step_for_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get log file for a step
    # Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_pipeline_step_log_for_repository(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      get_pipeline_step_log_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts)
      nil
    end

    # Get log file for a step
    # Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_pipeline_step_log_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_step_log_for_repository ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_step_log_for_repository"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_step_log_for_repository"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_step_log_for_repository"
      end
      # verify the required parameter 'step_uuid' is set
      if @api_client.config.client_side_validation && step_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'step_uuid' when calling PipelinesApi.get_pipeline_step_log_for_repository"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s)).sub('{' + 'step_uuid' + '}', CGI.escape(step_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_step_log_for_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_step_log_for_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List steps for a pipeline
    # Find steps for the given pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineSteps]
    def get_pipeline_steps_for_repository(workspace, repo_slug, pipeline_uuid, opts = {})
      data, _status_code, _headers = get_pipeline_steps_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, opts)
      data
    end

    # List steps for a pipeline
    # Find steps for the given pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineSteps, Integer, Hash)>] PaginatedPipelineSteps data, response status code and response headers
    def get_pipeline_steps_for_repository_with_http_info(workspace, repo_slug, pipeline_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_steps_for_repository ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_steps_for_repository"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_steps_for_repository"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_steps_for_repository"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineSteps'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_steps_for_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_steps_for_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get test case reasons (output) for a given test case in a step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param test_case_uuid [String] The UUID of the test case.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_pipeline_test_report_test_case_reasons(workspace, repo_slug, pipeline_uuid, step_uuid, test_case_uuid, opts = {})
      get_pipeline_test_report_test_case_reasons_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, test_case_uuid, opts)
      nil
    end

    # Get test case reasons (output) for a given test case in a step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param test_case_uuid [String] The UUID of the test case.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_pipeline_test_report_test_case_reasons_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, test_case_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_test_report_test_case_reasons ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_test_report_test_case_reasons"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_test_report_test_case_reasons"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_test_report_test_case_reasons"
      end
      # verify the required parameter 'step_uuid' is set
      if @api_client.config.client_side_validation && step_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'step_uuid' when calling PipelinesApi.get_pipeline_test_report_test_case_reasons"
      end
      # verify the required parameter 'test_case_uuid' is set
      if @api_client.config.client_side_validation && test_case_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'test_case_uuid' when calling PipelinesApi.get_pipeline_test_report_test_case_reasons"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases/{test_case_uuid}/test_case_reasons'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s)).sub('{' + 'step_uuid' + '}', CGI.escape(step_uuid.to_s)).sub('{' + 'test_case_uuid' + '}', CGI.escape(test_case_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_test_report_test_case_reasons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_test_report_test_case_reasons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get test cases for a given step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_pipeline_test_report_test_cases(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      get_pipeline_test_report_test_cases_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts)
      nil
    end

    # Get test cases for a given step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_pipeline_test_report_test_cases_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_test_report_test_cases ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_test_report_test_cases"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_test_report_test_cases"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_test_report_test_cases"
      end
      # verify the required parameter 'step_uuid' is set
      if @api_client.config.client_side_validation && step_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'step_uuid' when calling PipelinesApi.get_pipeline_test_report_test_cases"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s)).sub('{' + 'step_uuid' + '}', CGI.escape(step_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_test_report_test_cases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_test_report_test_cases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a summary of test reports for a given step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_pipeline_test_reports(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      get_pipeline_test_reports_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts)
      nil
    end

    # Get a summary of test reports for a given step of a pipeline.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param step_uuid [String] The UUID of the step.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_pipeline_test_reports_with_http_info(workspace, repo_slug, pipeline_uuid, step_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_test_reports ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_test_reports"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipeline_test_reports"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.get_pipeline_test_reports"
      end
      # verify the required parameter 'step_uuid' is set
      if @api_client.config.client_side_validation && step_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'step_uuid' when calling PipelinesApi.get_pipeline_test_reports"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s)).sub('{' + 'step_uuid' + '}', CGI.escape(step_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_test_reports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_test_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a variable for a team
    # Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def get_pipeline_variable_for_team(username, variable_uuid, opts = {})
      data, _status_code, _headers = get_pipeline_variable_for_team_with_http_info(username, variable_uuid, opts)
      data
    end

    # Get a variable for a team
    # Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def get_pipeline_variable_for_team_with_http_info(username, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_variable_for_team ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PipelinesApi.get_pipeline_variable_for_team"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.get_pipeline_variable_for_team"
      end
      # resource path
      local_var_path = '/teams/{username}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_variable_for_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_variable_for_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a variable for a user
    # Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def get_pipeline_variable_for_user(selected_user, variable_uuid, opts = {})
      data, _status_code, _headers = get_pipeline_variable_for_user_with_http_info(selected_user, variable_uuid, opts)
      data
    end

    # Get a variable for a user
    # Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def get_pipeline_variable_for_user_with_http_info(selected_user, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_variable_for_user ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PipelinesApi.get_pipeline_variable_for_user"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.get_pipeline_variable_for_user"
      end
      # resource path
      local_var_path = '/users/{selected_user}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_variable_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_variable_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get variable for a workspace
    # Retrieve a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def get_pipeline_variable_for_workspace(workspace, variable_uuid, opts = {})
      data, _status_code, _headers = get_pipeline_variable_for_workspace_with_http_info(workspace, variable_uuid, opts)
      data
    end

    # Get variable for a workspace
    # Retrieve a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def get_pipeline_variable_for_workspace_with_http_info(workspace, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_variable_for_workspace ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_variable_for_workspace"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.get_pipeline_variable_for_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_variable_for_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_variable_for_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List variables for an account
    # Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineVariables]
    def get_pipeline_variables_for_team(username, opts = {})
      data, _status_code, _headers = get_pipeline_variables_for_team_with_http_info(username, opts)
      data
    end

    # List variables for an account
    # Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineVariables, Integer, Hash)>] PaginatedPipelineVariables data, response status code and response headers
    def get_pipeline_variables_for_team_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_variables_for_team ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PipelinesApi.get_pipeline_variables_for_team"
      end
      # resource path
      local_var_path = '/teams/{username}/pipelines_config/variables/'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_variables_for_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_variables_for_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List variables for a user
    # Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineVariables]
    def get_pipeline_variables_for_user(selected_user, opts = {})
      data, _status_code, _headers = get_pipeline_variables_for_user_with_http_info(selected_user, opts)
      data
    end

    # List variables for a user
    # Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineVariables, Integer, Hash)>] PaginatedPipelineVariables data, response status code and response headers
    def get_pipeline_variables_for_user_with_http_info(selected_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_variables_for_user ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PipelinesApi.get_pipeline_variables_for_user"
      end
      # resource path
      local_var_path = '/users/{selected_user}/pipelines_config/variables/'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_variables_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_variables_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List variables for a workspace
    # Find workspace level variables.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineVariables]
    def get_pipeline_variables_for_workspace(workspace, opts = {})
      data, _status_code, _headers = get_pipeline_variables_for_workspace_with_http_info(workspace, opts)
      data
    end

    # List variables for a workspace
    # Find workspace level variables.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineVariables, Integer, Hash)>] PaginatedPipelineVariables data, response status code and response headers
    def get_pipeline_variables_for_workspace_with_http_info(workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_variables_for_workspace ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipeline_variables_for_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/variables'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_variables_for_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_variables_for_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pipelines
    # Find pipelines
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelines]
    def get_pipelines_for_repository(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_pipelines_for_repository_with_http_info(workspace, repo_slug, opts)
      data
    end

    # List pipelines
    # Find pipelines
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelines, Integer, Hash)>] PaginatedPipelines data, response status code and response headers
    def get_pipelines_for_repository_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipelines_for_repository ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_pipelines_for_repository"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_pipelines_for_repository"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelines'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipelines_for_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipelines_for_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cache content URI
    # Retrieve the URI of the content of the specified cache.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param cache_uuid [String] The UUID of the cache.
    # @param [Hash] opts the optional parameters
    # @return [PipelineCacheContentUri]
    def get_repository_pipeline_cache_content_uri(workspace, repo_slug, cache_uuid, opts = {})
      data, _status_code, _headers = get_repository_pipeline_cache_content_uri_with_http_info(workspace, repo_slug, cache_uuid, opts)
      data
    end

    # Get cache content URI
    # Retrieve the URI of the content of the specified cache.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param cache_uuid [String] The UUID of the cache.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineCacheContentUri, Integer, Hash)>] PipelineCacheContentUri data, response status code and response headers
    def get_repository_pipeline_cache_content_uri_with_http_info(workspace, repo_slug, cache_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_cache_content_uri ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_cache_content_uri"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_cache_content_uri"
      end
      # verify the required parameter 'cache_uuid' is set
      if @api_client.config.client_side_validation && cache_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'cache_uuid' when calling PipelinesApi.get_repository_pipeline_cache_content_uri"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines-config/caches/{cache_uuid}/content-uri'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'cache_uuid' + '}', CGI.escape(cache_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineCacheContentUri'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_cache_content_uri",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_cache_content_uri\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List caches
    # Retrieve the repository pipelines caches.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineCaches]
    def get_repository_pipeline_caches(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_repository_pipeline_caches_with_http_info(workspace, repo_slug, opts)
      data
    end

    # List caches
    # Retrieve the repository pipelines caches.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineCaches, Integer, Hash)>] PaginatedPipelineCaches data, response status code and response headers
    def get_repository_pipeline_caches_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_caches ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_caches"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_caches"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines-config/caches/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineCaches'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_caches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_caches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration
    # Retrieve the repository pipelines configuration.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PipelinesConfig]
    def get_repository_pipeline_config(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_repository_pipeline_config_with_http_info(workspace, repo_slug, opts)
      data
    end

    # Get configuration
    # Retrieve the repository pipelines configuration.
    # @param workspace [String] The account.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelinesConfig, Integer, Hash)>] PipelinesConfig data, response status code and response headers
    def get_repository_pipeline_config_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_config ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_config"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_config"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelinesConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a known host
    # Retrieve a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param known_host_uuid [String] The UUID of the known host to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [PipelineKnownHost]
    def get_repository_pipeline_known_host(workspace, repo_slug, known_host_uuid, opts = {})
      data, _status_code, _headers = get_repository_pipeline_known_host_with_http_info(workspace, repo_slug, known_host_uuid, opts)
      data
    end

    # Get a known host
    # Retrieve a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param known_host_uuid [String] The UUID of the known host to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineKnownHost, Integer, Hash)>] PipelineKnownHost data, response status code and response headers
    def get_repository_pipeline_known_host_with_http_info(workspace, repo_slug, known_host_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_known_host ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_known_host"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_known_host"
      end
      # verify the required parameter 'known_host_uuid' is set
      if @api_client.config.client_side_validation && known_host_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'known_host_uuid' when calling PipelinesApi.get_repository_pipeline_known_host"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'known_host_uuid' + '}', CGI.escape(known_host_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineKnownHost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_known_host",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_known_host\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List known hosts
    # Find repository level known hosts.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineKnownHosts]
    def get_repository_pipeline_known_hosts(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_repository_pipeline_known_hosts_with_http_info(workspace, repo_slug, opts)
      data
    end

    # List known hosts
    # Find repository level known hosts.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineKnownHosts, Integer, Hash)>] PaginatedPipelineKnownHosts data, response status code and response headers
    def get_repository_pipeline_known_hosts_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_known_hosts ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_known_hosts"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_known_hosts"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineKnownHosts'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_known_hosts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_known_hosts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a schedule
    # Retrieve a schedule by its UUID.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [PipelineSchedule]
    def get_repository_pipeline_schedule(workspace, repo_slug, schedule_uuid, opts = {})
      data, _status_code, _headers = get_repository_pipeline_schedule_with_http_info(workspace, repo_slug, schedule_uuid, opts)
      data
    end

    # Get a schedule
    # Retrieve a schedule by its UUID.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineSchedule, Integer, Hash)>] PipelineSchedule data, response status code and response headers
    def get_repository_pipeline_schedule_with_http_info(workspace, repo_slug, schedule_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_schedule ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_schedule"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_schedule"
      end
      # verify the required parameter 'schedule_uuid' is set
      if @api_client.config.client_side_validation && schedule_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_uuid' when calling PipelinesApi.get_repository_pipeline_schedule"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'schedule_uuid' + '}', CGI.escape(schedule_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineSchedule'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List executions of a schedule
    # Retrieve the executions of a given schedule.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineScheduleExecutions]
    def get_repository_pipeline_schedule_executions(workspace, repo_slug, schedule_uuid, opts = {})
      data, _status_code, _headers = get_repository_pipeline_schedule_executions_with_http_info(workspace, repo_slug, schedule_uuid, opts)
      data
    end

    # List executions of a schedule
    # Retrieve the executions of a given schedule.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineScheduleExecutions, Integer, Hash)>] PaginatedPipelineScheduleExecutions data, response status code and response headers
    def get_repository_pipeline_schedule_executions_with_http_info(workspace, repo_slug, schedule_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_schedule_executions ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_schedule_executions"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_schedule_executions"
      end
      # verify the required parameter 'schedule_uuid' is set
      if @api_client.config.client_side_validation && schedule_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_uuid' when calling PipelinesApi.get_repository_pipeline_schedule_executions"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'schedule_uuid' + '}', CGI.escape(schedule_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineScheduleExecutions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_schedule_executions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_schedule_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List schedules
    # Retrieve the configured schedules for the given repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineSchedules]
    def get_repository_pipeline_schedules(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_repository_pipeline_schedules_with_http_info(workspace, repo_slug, opts)
      data
    end

    # List schedules
    # Retrieve the configured schedules for the given repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineSchedules, Integer, Hash)>] PaginatedPipelineSchedules data, response status code and response headers
    def get_repository_pipeline_schedules_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_schedules ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_schedules"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_schedules"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineSchedules'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_schedules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SSH key pair
    # Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PipelineSshKeyPair]
    def get_repository_pipeline_ssh_key_pair(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_repository_pipeline_ssh_key_pair_with_http_info(workspace, repo_slug, opts)
      data
    end

    # Get SSH key pair
    # Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineSshKeyPair, Integer, Hash)>] PipelineSshKeyPair data, response status code and response headers
    def get_repository_pipeline_ssh_key_pair_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_ssh_key_pair ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_ssh_key_pair"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_ssh_key_pair"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineSshKeyPair'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_ssh_key_pair",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_ssh_key_pair\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a variable for a repository
    # Retrieve a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def get_repository_pipeline_variable(workspace, repo_slug, variable_uuid, opts = {})
      data, _status_code, _headers = get_repository_pipeline_variable_with_http_info(workspace, repo_slug, variable_uuid, opts)
      data
    end

    # Get a variable for a repository
    # Retrieve a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param variable_uuid [String] The UUID of the variable to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def get_repository_pipeline_variable_with_http_info(workspace, repo_slug, variable_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_variable"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.get_repository_pipeline_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List variables for a repository
    # Find repository level variables.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedPipelineVariables]
    def get_repository_pipeline_variables(workspace, repo_slug, opts = {})
      data, _status_code, _headers = get_repository_pipeline_variables_with_http_info(workspace, repo_slug, opts)
      data
    end

    # List variables for a repository
    # Find repository level variables.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedPipelineVariables, Integer, Hash)>] PaginatedPipelineVariables data, response status code and response headers
    def get_repository_pipeline_variables_with_http_info(workspace, repo_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_repository_pipeline_variables ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.get_repository_pipeline_variables"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.get_repository_pipeline_variables"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedPipelineVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_repository_pipeline_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_repository_pipeline_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a pipeline
    # Signal the stop of a pipeline and all of its steps that not have completed yet.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stop_pipeline(workspace, repo_slug, pipeline_uuid, opts = {})
      stop_pipeline_with_http_info(workspace, repo_slug, pipeline_uuid, opts)
      nil
    end

    # Stop a pipeline
    # Signal the stop of a pipeline and all of its steps that not have completed yet.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_uuid [String] The UUID of the pipeline.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stop_pipeline_with_http_info(workspace, repo_slug, pipeline_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.stop_pipeline ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.stop_pipeline"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.stop_pipeline"
      end
      # verify the required parameter 'pipeline_uuid' is set
      if @api_client.config.client_side_validation && pipeline_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_uuid' when calling PipelinesApi.stop_pipeline"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'pipeline_uuid' + '}', CGI.escape(pipeline_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.stop_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#stop_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a variable for an environment
    # Update a deployment environment level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param variable_uuid [String] The UUID of the variable to update.
    # @param deployment_variable [DeploymentVariable] The updated deployment variable.
    # @param [Hash] opts the optional parameters
    # @return [DeploymentVariable]
    def update_deployment_variable(workspace, repo_slug, environment_uuid, variable_uuid, deployment_variable, opts = {})
      data, _status_code, _headers = update_deployment_variable_with_http_info(workspace, repo_slug, environment_uuid, variable_uuid, deployment_variable, opts)
      data
    end

    # Update a variable for an environment
    # Update a deployment environment level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param environment_uuid [String] The environment.
    # @param variable_uuid [String] The UUID of the variable to update.
    # @param deployment_variable [DeploymentVariable] The updated deployment variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentVariable, Integer, Hash)>] DeploymentVariable data, response status code and response headers
    def update_deployment_variable_with_http_info(workspace, repo_slug, environment_uuid, variable_uuid, deployment_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_deployment_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_deployment_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_deployment_variable"
      end
      # verify the required parameter 'environment_uuid' is set
      if @api_client.config.client_side_validation && environment_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'environment_uuid' when calling PipelinesApi.update_deployment_variable"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.update_deployment_variable"
      end
      # verify the required parameter 'deployment_variable' is set
      if @api_client.config.client_side_validation && deployment_variable.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_variable' when calling PipelinesApi.update_deployment_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'environment_uuid' + '}', CGI.escape(environment_uuid.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(deployment_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'DeploymentVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_deployment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_deployment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a variable for a team
    # Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param variable_uuid [String] The UUID of the variable.
    # @param pipeline_variable [PipelineVariable] The updated variable.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def update_pipeline_variable_for_team(username, variable_uuid, pipeline_variable, opts = {})
      data, _status_code, _headers = update_pipeline_variable_for_team_with_http_info(username, variable_uuid, pipeline_variable, opts)
      data
    end

    # Update a variable for a team
    # Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param username [String] The account.
    # @param variable_uuid [String] The UUID of the variable.
    # @param pipeline_variable [PipelineVariable] The updated variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def update_pipeline_variable_for_team_with_http_info(username, variable_uuid, pipeline_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_pipeline_variable_for_team ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PipelinesApi.update_pipeline_variable_for_team"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.update_pipeline_variable_for_team"
      end
      # verify the required parameter 'pipeline_variable' is set
      if @api_client.config.client_side_validation && pipeline_variable.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_variable' when calling PipelinesApi.update_pipeline_variable_for_team"
      end
      # resource path
      local_var_path = '/teams/{username}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_pipeline_variable_for_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_pipeline_variable_for_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a variable for a user
    # Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param variable_uuid [String] The UUID of the variable.
    # @param pipeline_variable [PipelineVariable] The updated variable.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def update_pipeline_variable_for_user(selected_user, variable_uuid, pipeline_variable, opts = {})
      data, _status_code, _headers = update_pipeline_variable_for_user_with_http_info(selected_user, variable_uuid, pipeline_variable, opts)
      data
    end

    # Update a variable for a user
    # Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
    # @param selected_user [String] Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID.
    # @param variable_uuid [String] The UUID of the variable.
    # @param pipeline_variable [PipelineVariable] The updated variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def update_pipeline_variable_for_user_with_http_info(selected_user, variable_uuid, pipeline_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_pipeline_variable_for_user ...'
      end
      # verify the required parameter 'selected_user' is set
      if @api_client.config.client_side_validation && selected_user.nil?
        fail ArgumentError, "Missing the required parameter 'selected_user' when calling PipelinesApi.update_pipeline_variable_for_user"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.update_pipeline_variable_for_user"
      end
      # verify the required parameter 'pipeline_variable' is set
      if @api_client.config.client_side_validation && pipeline_variable.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_variable' when calling PipelinesApi.update_pipeline_variable_for_user"
      end
      # resource path
      local_var_path = '/users/{selected_user}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'selected_user' + '}', CGI.escape(selected_user.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_pipeline_variable_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_pipeline_variable_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update variable for a workspace
    # Update a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param variable_uuid [String] The UUID of the variable.
    # @param pipeline_variable [PipelineVariable] The updated variable.
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def update_pipeline_variable_for_workspace(workspace, variable_uuid, pipeline_variable, opts = {})
      data, _status_code, _headers = update_pipeline_variable_for_workspace_with_http_info(workspace, variable_uuid, pipeline_variable, opts)
      data
    end

    # Update variable for a workspace
    # Update a workspace level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param variable_uuid [String] The UUID of the variable.
    # @param pipeline_variable [PipelineVariable] The updated variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def update_pipeline_variable_for_workspace_with_http_info(workspace, variable_uuid, pipeline_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_pipeline_variable_for_workspace ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_pipeline_variable_for_workspace"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.update_pipeline_variable_for_workspace"
      end
      # verify the required parameter 'pipeline_variable' is set
      if @api_client.config.client_side_validation && pipeline_variable.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_variable' when calling PipelinesApi.update_pipeline_variable_for_workspace"
      end
      # resource path
      local_var_path = '/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_pipeline_variable_for_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_pipeline_variable_for_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the next build number
    # Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_build_number [PipelineBuildNumber] The build number to update.
    # @param [Hash] opts the optional parameters
    # @return [PipelineBuildNumber]
    def update_repository_build_number(workspace, repo_slug, pipeline_build_number, opts = {})
      data, _status_code, _headers = update_repository_build_number_with_http_info(workspace, repo_slug, pipeline_build_number, opts)
      data
    end

    # Update the next build number
    # Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_build_number [PipelineBuildNumber] The build number to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineBuildNumber, Integer, Hash)>] PipelineBuildNumber data, response status code and response headers
    def update_repository_build_number_with_http_info(workspace, repo_slug, pipeline_build_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_repository_build_number ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_repository_build_number"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_repository_build_number"
      end
      # verify the required parameter 'pipeline_build_number' is set
      if @api_client.config.client_side_validation && pipeline_build_number.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_build_number' when calling PipelinesApi.update_repository_build_number"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/build_number'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_build_number)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineBuildNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_repository_build_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_repository_build_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update configuration
    # Update the pipelines configuration for a repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipelines_config [PipelinesConfig] The updated repository pipelines configuration.
    # @param [Hash] opts the optional parameters
    # @return [PipelinesConfig]
    def update_repository_pipeline_config(workspace, repo_slug, pipelines_config, opts = {})
      data, _status_code, _headers = update_repository_pipeline_config_with_http_info(workspace, repo_slug, pipelines_config, opts)
      data
    end

    # Update configuration
    # Update the pipelines configuration for a repository.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipelines_config [PipelinesConfig] The updated repository pipelines configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelinesConfig, Integer, Hash)>] PipelinesConfig data, response status code and response headers
    def update_repository_pipeline_config_with_http_info(workspace, repo_slug, pipelines_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_repository_pipeline_config ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_repository_pipeline_config"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_repository_pipeline_config"
      end
      # verify the required parameter 'pipelines_config' is set
      if @api_client.config.client_side_validation && pipelines_config.nil?
        fail ArgumentError, "Missing the required parameter 'pipelines_config' when calling PipelinesApi.update_repository_pipeline_config"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipelines_config)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelinesConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_repository_pipeline_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_repository_pipeline_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SSH key pair
    # Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_ssh_key_pair [PipelineSshKeyPair] The created or updated SSH key pair.
    # @param [Hash] opts the optional parameters
    # @return [PipelineSshKeyPair]
    def update_repository_pipeline_key_pair(workspace, repo_slug, pipeline_ssh_key_pair, opts = {})
      data, _status_code, _headers = update_repository_pipeline_key_pair_with_http_info(workspace, repo_slug, pipeline_ssh_key_pair, opts)
      data
    end

    # Update SSH key pair
    # Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param pipeline_ssh_key_pair [PipelineSshKeyPair] The created or updated SSH key pair.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineSshKeyPair, Integer, Hash)>] PipelineSshKeyPair data, response status code and response headers
    def update_repository_pipeline_key_pair_with_http_info(workspace, repo_slug, pipeline_ssh_key_pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_repository_pipeline_key_pair ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_repository_pipeline_key_pair"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_repository_pipeline_key_pair"
      end
      # verify the required parameter 'pipeline_ssh_key_pair' is set
      if @api_client.config.client_side_validation && pipeline_ssh_key_pair.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_ssh_key_pair' when calling PipelinesApi.update_repository_pipeline_key_pair"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_ssh_key_pair)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineSshKeyPair'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_repository_pipeline_key_pair",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_repository_pipeline_key_pair\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a known host
    # Update a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param known_host_uuid [String] The UUID of the known host to update.
    # @param pipeline_known_host [PipelineKnownHost] The updated known host.
    # @param [Hash] opts the optional parameters
    # @return [PipelineKnownHost]
    def update_repository_pipeline_known_host(workspace, repo_slug, known_host_uuid, pipeline_known_host, opts = {})
      data, _status_code, _headers = update_repository_pipeline_known_host_with_http_info(workspace, repo_slug, known_host_uuid, pipeline_known_host, opts)
      data
    end

    # Update a known host
    # Update a repository level known host.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param known_host_uuid [String] The UUID of the known host to update.
    # @param pipeline_known_host [PipelineKnownHost] The updated known host.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineKnownHost, Integer, Hash)>] PipelineKnownHost data, response status code and response headers
    def update_repository_pipeline_known_host_with_http_info(workspace, repo_slug, known_host_uuid, pipeline_known_host, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_repository_pipeline_known_host ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_repository_pipeline_known_host"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_repository_pipeline_known_host"
      end
      # verify the required parameter 'known_host_uuid' is set
      if @api_client.config.client_side_validation && known_host_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'known_host_uuid' when calling PipelinesApi.update_repository_pipeline_known_host"
      end
      # verify the required parameter 'pipeline_known_host' is set
      if @api_client.config.client_side_validation && pipeline_known_host.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_known_host' when calling PipelinesApi.update_repository_pipeline_known_host"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'known_host_uuid' + '}', CGI.escape(known_host_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_known_host)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineKnownHost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_repository_pipeline_known_host",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_repository_pipeline_known_host\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a schedule
    # Update a schedule.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param pipeline_schedule [PipelineSchedule] The schedule to update.
    # @param [Hash] opts the optional parameters
    # @return [PipelineSchedule]
    def update_repository_pipeline_schedule(workspace, repo_slug, schedule_uuid, pipeline_schedule, opts = {})
      data, _status_code, _headers = update_repository_pipeline_schedule_with_http_info(workspace, repo_slug, schedule_uuid, pipeline_schedule, opts)
      data
    end

    # Update a schedule
    # Update a schedule.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param schedule_uuid [String] The uuid of the schedule.
    # @param pipeline_schedule [PipelineSchedule] The schedule to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineSchedule, Integer, Hash)>] PipelineSchedule data, response status code and response headers
    def update_repository_pipeline_schedule_with_http_info(workspace, repo_slug, schedule_uuid, pipeline_schedule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_repository_pipeline_schedule ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_repository_pipeline_schedule"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_repository_pipeline_schedule"
      end
      # verify the required parameter 'schedule_uuid' is set
      if @api_client.config.client_side_validation && schedule_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_uuid' when calling PipelinesApi.update_repository_pipeline_schedule"
      end
      # verify the required parameter 'pipeline_schedule' is set
      if @api_client.config.client_side_validation && pipeline_schedule.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_schedule' when calling PipelinesApi.update_repository_pipeline_schedule"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'schedule_uuid' + '}', CGI.escape(schedule_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_schedule)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineSchedule'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_repository_pipeline_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_repository_pipeline_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a variable for a repository
    # Update a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param variable_uuid [String] The UUID of the variable to update.
    # @param pipeline_variable [PipelineVariable] The updated variable
    # @param [Hash] opts the optional parameters
    # @return [PipelineVariable]
    def update_repository_pipeline_variable(workspace, repo_slug, variable_uuid, pipeline_variable, opts = {})
      data, _status_code, _headers = update_repository_pipeline_variable_with_http_info(workspace, repo_slug, variable_uuid, pipeline_variable, opts)
      data
    end

    # Update a variable for a repository
    # Update a repository level variable.
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;.
    # @param repo_slug [String] The repository.
    # @param variable_uuid [String] The UUID of the variable to update.
    # @param pipeline_variable [PipelineVariable] The updated variable
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineVariable, Integer, Hash)>] PipelineVariable data, response status code and response headers
    def update_repository_pipeline_variable_with_http_info(workspace, repo_slug, variable_uuid, pipeline_variable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_repository_pipeline_variable ...'
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling PipelinesApi.update_repository_pipeline_variable"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling PipelinesApi.update_repository_pipeline_variable"
      end
      # verify the required parameter 'variable_uuid' is set
      if @api_client.config.client_side_validation && variable_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'variable_uuid' when calling PipelinesApi.update_repository_pipeline_variable"
      end
      # verify the required parameter 'pipeline_variable' is set
      if @api_client.config.client_side_validation && pipeline_variable.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_variable' when calling PipelinesApi.update_repository_pipeline_variable"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}'.sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'variable_uuid' + '}', CGI.escape(variable_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline_variable)

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_repository_pipeline_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_repository_pipeline_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
