=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module Bitbucket
  class Branchrestriction < Object
    attr_accessor :links

    # The branch restriction status' id.
    attr_accessor :id

    # The type of restriction that is being applied.
    attr_accessor :kind

    # Indicates how the restriction is matched against a branch. The default is `glob`.
    attr_accessor :branch_match_kind

    # Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository.
    attr_accessor :branch_type

    # Apply the restriction to branches that match this pattern. Active when `branch_match_kind` is `glob`. Will be empty when `branch_match_kind` is `branching_model`.
    attr_accessor :pattern

    attr_accessor :users

    attr_accessor :groups

    # <staticmethod object at 0x7ff7b27cdfd0>
    attr_accessor :value

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'links' => :'links',
        :'id' => :'id',
        :'kind' => :'kind',
        :'branch_match_kind' => :'branch_match_kind',
        :'branch_type' => :'branch_type',
        :'pattern' => :'pattern',
        :'users' => :'users',
        :'groups' => :'groups',
        :'value' => :'value'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'links' => :'VersionLinks',
        :'id' => :'Integer',
        :'kind' => :'String',
        :'branch_match_kind' => :'String',
        :'branch_type' => :'String',
        :'pattern' => :'String',
        :'users' => :'Array<Account>',
        :'groups' => :'Array<Group>',
        :'value' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'BranchRestriction',
      :'Object'
      ]
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'type'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Bitbucket::Branchrestriction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Bitbucket::Branchrestriction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'links')
        self.links = attributes[:'links']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'kind')
        self.kind = attributes[:'kind']
      end

      if attributes.key?(:'branch_match_kind')
        self.branch_match_kind = attributes[:'branch_match_kind']
      end

      if attributes.key?(:'branch_type')
        self.branch_type = attributes[:'branch_type']
      end

      if attributes.key?(:'pattern')
        self.pattern = attributes[:'pattern']
      end

      if attributes.key?(:'users')
        if (value = attributes[:'users']).is_a?(Array)
          self.users = value
        end
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @kind.nil?
        invalid_properties.push('invalid value for "kind", kind cannot be nil.')
      end

      if @branch_match_kind.nil?
        invalid_properties.push('invalid value for "branch_match_kind", branch_match_kind cannot be nil.')
      end

      if @pattern.nil?
        invalid_properties.push('invalid value for "pattern", pattern cannot be nil.')
      end

      if !@users.nil? && @users.length < 0
        invalid_properties.push('invalid value for "users", number of items must be greater than or equal to 0.')
      end

      if !@groups.nil? && @groups.length < 0
        invalid_properties.push('invalid value for "groups", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @kind.nil?
      kind_validator = EnumAttributeValidator.new('String', ["push", "delete", "force", "restrict_merges", "require_tasks_to_be_completed", "require_approvals_to_merge", "require_default_reviewer_approvals_to_merge", "require_no_changes_requested", "require_passing_builds_to_merge", "require_commits_behind", "reset_pullrequest_approvals_on_change", "smart_reset_pullrequest_approvals", "reset_pullrequest_changes_requested_on_change", "require_all_dependencies_merged", "enforce_merge_checks", "allow_auto_merge_when_builds_pass"])
      return false unless kind_validator.valid?(@kind)
      return false if @branch_match_kind.nil?
      branch_match_kind_validator = EnumAttributeValidator.new('String', ["branching_model", "glob"])
      return false unless branch_match_kind_validator.valid?(@branch_match_kind)
      branch_type_validator = EnumAttributeValidator.new('String', ["feature", "bugfix", "release", "hotfix", "development", "production"])
      return false unless branch_type_validator.valid?(@branch_type)
      return false if @pattern.nil?
      return false if !@users.nil? && @users.length < 0
      return false if !@groups.nil? && @groups.length < 0
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(kind)
      validator = EnumAttributeValidator.new('String', ["push", "delete", "force", "restrict_merges", "require_tasks_to_be_completed", "require_approvals_to_merge", "require_default_reviewer_approvals_to_merge", "require_no_changes_requested", "require_passing_builds_to_merge", "require_commits_behind", "reset_pullrequest_approvals_on_change", "smart_reset_pullrequest_approvals", "reset_pullrequest_changes_requested_on_change", "require_all_dependencies_merged", "enforce_merge_checks", "allow_auto_merge_when_builds_pass"])
      unless validator.valid?(kind)
        fail ArgumentError, "invalid value for \"kind\", must be one of #{validator.allowable_values}."
      end
      @kind = kind
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] branch_match_kind Object to be assigned
    def branch_match_kind=(branch_match_kind)
      validator = EnumAttributeValidator.new('String', ["branching_model", "glob"])
      unless validator.valid?(branch_match_kind)
        fail ArgumentError, "invalid value for \"branch_match_kind\", must be one of #{validator.allowable_values}."
      end
      @branch_match_kind = branch_match_kind
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] branch_type Object to be assigned
    def branch_type=(branch_type)
      validator = EnumAttributeValidator.new('String', ["feature", "bugfix", "release", "hotfix", "development", "production"])
      unless validator.valid?(branch_type)
        fail ArgumentError, "invalid value for \"branch_type\", must be one of #{validator.allowable_values}."
      end
      @branch_type = branch_type
    end

    # Custom attribute writer method with validation
    # @param [Object] users Value to be assigned
    def users=(users)
      if !users.nil? && users.length < 0
        fail ArgumentError, 'invalid value for "users", number of items must be greater than or equal to 0.'
      end

      @users = users
    end

    # Custom attribute writer method with validation
    # @param [Object] groups Value to be assigned
    def groups=(groups)
      if !groups.nil? && groups.length < 0
        fail ArgumentError, 'invalid value for "groups", number of items must be greater than or equal to 0.'
      end

      @groups = groups
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          links == o.links &&
          id == o.id &&
          kind == o.kind &&
          branch_match_kind == o.branch_match_kind &&
          branch_type == o.branch_type &&
          pattern == o.pattern &&
          users == o.users &&
          groups == o.groups &&
          value == o.value && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [links, id, kind, branch_match_kind, branch_type, pattern, users, groups, value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Bitbucket.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
