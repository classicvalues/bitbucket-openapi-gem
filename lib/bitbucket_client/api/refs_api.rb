=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module Bitbucket
  class RefsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List open branches
    # Returns a list of all open branches within the specified repository.         Results will be in the order the source control manager returns them.          ```         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen=1 | jq .         {           \"pagelen\": 1,           \"size\": 187,           \"values\": [             {               \"name\": \"issue-9.3/AUI-5343-assistive-class\",               \"links\": {                 \"commits\": {                   \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/issue-9.3/AUI-5343-assistive-class\"                 },                 \"self\": {                   \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/issue-9.3/AUI-5343-assistive-class\"                 },                 \"html\": {                   \"href\": \"https://bitbucket.org/atlassian/aui/branch/issue-9.3/AUI-5343-assistive-class\"                 }               },               \"default_merge_strategy\": \"squash\",               \"merge_strategies\": [                 \"merge_commit\",                 \"squash\",                 \"fast_forward\"               ],               \"type\": \"branch\",               \"target\": {                 \"hash\": \"e5d1cde9069fcb9f0af90403a4de2150c125a148\",                 \"repository\": {                   \"links\": {                     \"self\": {                       \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui\"                     },                     \"html\": {                       \"href\": \"https://bitbucket.org/atlassian/aui\"                     },                     \"avatar\": {                       \"href\": \"https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts=86317\"                     }                   },                   \"type\": \"repository\",                   \"name\": \"aui\",                   \"full_name\": \"atlassian/aui\",                   \"uuid\": \"{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\"                 },                 \"links\": {                   \"self\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148\"                   },                   \"comments\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/comments\"                   },                   \"patch\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e5d1cde9069fcb9f0af90403a4de2150c125a148\"                   },                   \"html\": {                     \"href\": \"https://bitbucket.org/atlassian/aui/commits/e5d1cde9069fcb9f0af90403a4de2150c125a148\"                   },                   \"diff\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e5d1cde9069fcb9f0af90403a4de2150c125a148\"                   },                   \"approve\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/approve\"                   },                   \"statuses\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/statuses\"                   }                 },                 \"author\": {                   \"raw\": \"Marcin Konopka <mkonopka@atlassian.com>\",                   \"type\": \"author\",                   \"user\": {                     \"display_name\": \"Marcin Konopka\",                     \"uuid\": \"{47cc24f4-2a05-4420-88fe-0417535a110a}\",                     \"links\": {                       \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/users/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D\"                       },                       \"html\": {                         \"href\": \"https://bitbucket.org/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D/\"                       },                       \"avatar\": {                         \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/MK-1.png\"                       }                     },                     \"nickname\": \"Marcin Konopka\",                     \"type\": \"user\",                     \"account_id\": \"60113d2b47a9540069f4de03\"                   }                 },                 \"parents\": [                   {                     \"hash\": \"87f7fc92b00464ae47b13ef65c91884e4ac9be51\",                     \"type\": \"commit\",                     \"links\": {                       \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/87f7fc92b00464ae47b13ef65c91884e4ac9be51\"                       },                       \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/aui/commits/87f7fc92b00464ae47b13ef65c91884e4ac9be51\"                       }                     }                   }                 ],                 \"date\": \"2021-04-13T13:44:49+00:00\",                 \"message\": \"wip \",                 \"type\": \"commit\"               }             }           ],           \"page\": 1,           \"next\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen=1&page=2\"         }         ```          Branches support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)         that can be used to search for specific branches. For instance, to find         all branches that have \"stab\" in their name:          ```         curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches -G --data-urlencode 'q=name ~ \"stab\"'         ```          By default, results will be in the order the underlying source control system returns them and identical to         the ordering one sees when running \"$ git branch --list\". Note that this follows simple         lexical ordering of the ref names.          This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are         sorted [\"v10\", \"v11\", \"v9\"] instead of [\"v9\", \"v10\", \"v11\"].          Sorting can be changed using the ?q= query parameter. When using ?q=name to explicitly sort on ref name,         Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @option opts [String] :sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;branch1&#39;, &#39;branch2&#39;, &#39;branch10&#39;] instead of [&#39;branch1&#39;, &#39;branch10&#39;, &#39;branch2&#39;].
    # @return [PaginatedBranches]
    def repositories_workspace_repo_slug_refs_branches_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_branches_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List open branches
    # Returns a list of all open branches within the specified repository.         Results will be in the order the source control manager returns them.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1 | jq .         {           \&quot;pagelen\&quot;: 1,           \&quot;size\&quot;: 187,           \&quot;values\&quot;: [             {               \&quot;name\&quot;: \&quot;issue-9.3/AUI-5343-assistive-class\&quot;,               \&quot;links\&quot;: {                 \&quot;commits\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/issue-9.3/AUI-5343-assistive-class\&quot;                 }               },               \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,               \&quot;merge_strategies\&quot;: [                 \&quot;merge_commit\&quot;,                 \&quot;squash\&quot;,                 \&quot;fast_forward\&quot;               ],               \&quot;type\&quot;: \&quot;branch\&quot;,               \&quot;target\&quot;: {                 \&quot;hash\&quot;: \&quot;e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;,                 \&quot;repository\&quot;: {                   \&quot;links\&quot;: {                     \&quot;self\&quot;: {                       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                     },                     \&quot;html\&quot;: {                       \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                     },                     \&quot;avatar\&quot;: {                       \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                     }                   },                   \&quot;type\&quot;: \&quot;repository\&quot;,                   \&quot;name\&quot;: \&quot;aui\&quot;,                   \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,                   \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;                 },                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;comments\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/comments\&quot;                   },                   \&quot;patch\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;diff\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;approve\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/approve\&quot;                   },                   \&quot;statuses\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/statuses\&quot;                   }                 },                 \&quot;author\&quot;: {                   \&quot;raw\&quot;: \&quot;Marcin Konopka &lt;mkonopka@atlassian.com&gt;\&quot;,                   \&quot;type\&quot;: \&quot;author\&quot;,                   \&quot;user\&quot;: {                     \&quot;display_name\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;uuid\&quot;: \&quot;{47cc24f4-2a05-4420-88fe-0417535a110a}\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D/\&quot;                       },                       \&quot;avatar\&quot;: {                         \&quot;href\&quot;: \&quot;https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/MK-1.png\&quot;                       }                     },                     \&quot;nickname\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;type\&quot;: \&quot;user\&quot;,                     \&quot;account_id\&quot;: \&quot;60113d2b47a9540069f4de03\&quot;                   }                 },                 \&quot;parents\&quot;: [                   {                     \&quot;hash\&quot;: \&quot;87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;,                     \&quot;type\&quot;: \&quot;commit\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       }                     }                   }                 ],                 \&quot;date\&quot;: \&quot;2021-04-13T13:44:49+00:00\&quot;,                 \&quot;message\&quot;: \&quot;wip \&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;               }             }           ],           \&quot;page\&quot;: 1,           \&quot;next\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1&amp;page&#x3D;2\&quot;         }         &#x60;&#x60;&#x60;          Branches support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)         that can be used to search for specific branches. For instance, to find         all branches that have \&quot;stab\&quot; in their name:          &#x60;&#x60;&#x60;         curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches -G --data-urlencode &#39;q&#x3D;name ~ \&quot;stab\&quot;&#39;         &#x60;&#x60;&#x60;          By default, results will be in the order the underlying source control system returns them and identical to         the ordering one sees when running \&quot;$ git branch --list\&quot;. Note that this follows simple         lexical ordering of the ref names.          This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are         sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].          Sorting can be changed using the ?q&#x3D; query parameter. When using ?q&#x3D;name to explicitly sort on ref name,         Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @option opts [String] :sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;branch1&#39;, &#39;branch2&#39;, &#39;branch10&#39;] instead of [&#39;branch1&#39;, &#39;branch10&#39;, &#39;branch2&#39;].
    # @return [Array<(PaginatedBranches, Integer, Hash)>] PaginatedBranches data, response status code and response headers
    def repositories_workspace_repo_slug_refs_branches_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_branches_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/branches'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedBranches'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_branches_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_branches_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a branch
    # Delete a branch in the specified repository.  The main branch is not allowed to be deleted and will return a 400 response.  The branch name should not include any prefixes (e.g. refs/heads).
    # @param name [String] The name of the branch.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_refs_branches_name_delete(name, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_refs_branches_name_delete_with_http_info(name, repo_slug, workspace, opts)
      nil
    end

    # Delete a branch
    # Delete a branch in the specified repository.  The main branch is not allowed to be deleted and will return a 400 response.  The branch name should not include any prefixes (e.g. refs/heads).
    # @param name [String] The name of the branch.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_refs_branches_name_delete_with_http_info(name, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_branches_name_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_name_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_name_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_name_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/branches/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_branches_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_branches_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a branch
    # Returns a branch object within the specified repository.          ```         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master | jq .         {           \"name\": \"master\",           \"links\": {             \"commits\": {               \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/master\"             },             \"self\": {               \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master\"             },             \"html\": {               \"href\": \"https://bitbucket.org/atlassian/aui/branch/master\"             }           },           \"default_merge_strategy\": \"squash\",           \"merge_strategies\": [             \"merge_commit\",             \"squash\",             \"fast_forward\"           ],           \"type\": \"branch\",           \"target\": {             \"hash\": \"e7d158ff7ed5538c28f94cd97a9ad569680fc94e\",             \"repository\": {               \"links\": {                 \"self\": {                   \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui\"                 },                 \"html\": {                   \"href\": \"https://bitbucket.org/atlassian/aui\"                 },                 \"avatar\": {                   \"href\": \"https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts=86317\"                 }               },               \"type\": \"repository\",               \"name\": \"aui\",               \"full_name\": \"atlassian/aui\",               \"uuid\": \"{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\"             },             \"links\": {               \"self\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\"               },               \"comments\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/comments\"               },               \"patch\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\"               },               \"html\": {                 \"href\": \"https://bitbucket.org/atlassian/aui/commits/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\"               },               \"diff\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\"               },               \"approve\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/approve\"               },               \"statuses\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/statuses\"               }             },             \"author\": {               \"raw\": \"psre-renovate-bot <psre-renovate-bot@atlassian.com>\",               \"type\": \"author\",               \"user\": {                 \"display_name\": \"psre-renovate-bot\",                 \"uuid\": \"{250a442a-3ab3-4fcb-87c3-3c8f3df65ec7}\",                 \"links\": {                   \"self\": {                     \"href\": \"https://api.bitbucket.org/2.0/users/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D\"                   },                   \"html\": {                     \"href\": \"https://bitbucket.org/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D/\"                   },                   \"avatar\": {                     \"href\": \"https://secure.gravatar.com/avatar/6972ee037c9f36360170a86f544071a2?d=https%3A%2F%2Favatar-management--avatars.us-west-2.prod.public.atl-paas.net%2Finitials%2FP-3.png\"                   }                 },                 \"nickname\": \"Renovate Bot\",                 \"type\": \"user\",                 \"account_id\": \"5d5355e8c6b9320d9ea5b28d\"               }             },             \"parents\": [               {                 \"hash\": \"eab868a309e75733de80969a7bed1ec6d4651e06\",                 \"type\": \"commit\",                 \"links\": {                   \"self\": {                     \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/eab868a309e75733de80969a7bed1ec6d4651e06\"                   },                   \"html\": {                     \"href\": \"https://bitbucket.org/atlassian/aui/commits/eab868a309e75733de80969a7bed1ec6d4651e06\"                   }                 }               }             ],             \"date\": \"2021-04-12T06:44:38+00:00\",             \"message\": \"Merged in issue/NONE-renovate-master-babel-monorepo (pull request #2883)  chore(deps): update babel monorepo to v7.13.15 (master)  Approved-by: Chris \"Daz\" Darroch \",             \"type\": \"commit\"           }         }         ```          This call requires authentication. Private repositories require the         caller to authenticate with an account that has appropriate         authorization.          For Git, the branch name should not include any prefixes (e.g.         refs/heads).
    # @param name [String] The name of the branch.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Branch]
    def repositories_workspace_repo_slug_refs_branches_name_get(name, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_branches_name_get_with_http_info(name, repo_slug, workspace, opts)
      data
    end

    # Get a branch
    # Returns a branch object within the specified repository.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master | jq .         {           \&quot;name\&quot;: \&quot;master\&quot;,           \&quot;links\&quot;: {             \&quot;commits\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/master\&quot;             },             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/master\&quot;             }           },           \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,           \&quot;merge_strategies\&quot;: [             \&quot;merge_commit\&quot;,             \&quot;squash\&quot;,             \&quot;fast_forward\&quot;           ],           \&quot;type\&quot;: \&quot;branch\&quot;,           \&quot;target\&quot;: {             \&quot;hash\&quot;: \&quot;e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;,             \&quot;repository\&quot;: {               \&quot;links\&quot;: {                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                 },                 \&quot;avatar\&quot;: {                   \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                 }               },               \&quot;type\&quot;: \&quot;repository\&quot;,               \&quot;name\&quot;: \&quot;aui\&quot;,               \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,               \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;             },             \&quot;links\&quot;: {               \&quot;self\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;comments\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/comments\&quot;               },               \&quot;patch\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;html\&quot;: {                 \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;diff\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;approve\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/approve\&quot;               },               \&quot;statuses\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/statuses\&quot;               }             },             \&quot;author\&quot;: {               \&quot;raw\&quot;: \&quot;psre-renovate-bot &lt;psre-renovate-bot@atlassian.com&gt;\&quot;,               \&quot;type\&quot;: \&quot;author\&quot;,               \&quot;user\&quot;: {                 \&quot;display_name\&quot;: \&quot;psre-renovate-bot\&quot;,                 \&quot;uuid\&quot;: \&quot;{250a442a-3ab3-4fcb-87c3-3c8f3df65ec7}\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D/\&quot;                   },                   \&quot;avatar\&quot;: {                     \&quot;href\&quot;: \&quot;https://secure.gravatar.com/avatar/6972ee037c9f36360170a86f544071a2?d&#x3D;https%3A%2F%2Favatar-management--avatars.us-west-2.prod.public.atl-paas.net%2Finitials%2FP-3.png\&quot;                   }                 },                 \&quot;nickname\&quot;: \&quot;Renovate Bot\&quot;,                 \&quot;type\&quot;: \&quot;user\&quot;,                 \&quot;account_id\&quot;: \&quot;5d5355e8c6b9320d9ea5b28d\&quot;               }             },             \&quot;parents\&quot;: [               {                 \&quot;hash\&quot;: \&quot;eab868a309e75733de80969a7bed1ec6d4651e06\&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   }                 }               }             ],             \&quot;date\&quot;: \&quot;2021-04-12T06:44:38+00:00\&quot;,             \&quot;message\&quot;: \&quot;Merged in issue/NONE-renovate-master-babel-monorepo (pull request #2883)  chore(deps): update babel monorepo to v7.13.15 (master)  Approved-by: Chris \&quot;Daz\&quot; Darroch \&quot;,             \&quot;type\&quot;: \&quot;commit\&quot;           }         }         &#x60;&#x60;&#x60;          This call requires authentication. Private repositories require the         caller to authenticate with an account that has appropriate         authorization.          For Git, the branch name should not include any prefixes (e.g.         refs/heads).
    # @param name [String] The name of the branch.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Branch, Integer, Hash)>] Branch data, response status code and response headers
    def repositories_workspace_repo_slug_refs_branches_name_get_with_http_info(name, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_branches_name_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_name_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_name_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_name_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/branches/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Branch'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_branches_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_branches_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a branch
    # Creates a new branch in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  ``` curl https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/branches \\ -s -u seanfarley -X POST -H \"Content-Type: application/json\" \\ -d '{     \"name\" : \"smf/create-feature\",     \"target\" : {         \"hash\" : \"default\",     } }' ```  This call requires authentication. Private repositories require the caller to authenticate with an account that has appropriate authorization.  The branch name should not include any prefixes (e.g. refs/heads). This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Branch]
    def repositories_workspace_repo_slug_refs_branches_post(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_branches_post_with_http_info(repo_slug, workspace, opts)
      data
    end

    # Create a branch
    # Creates a new branch in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/branches \\ -s -u seanfarley -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;smf/create-feature\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;default\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This call requires authentication. Private repositories require the caller to authenticate with an account that has appropriate authorization.  The branch name should not include any prefixes (e.g. refs/heads). This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Branch, Integer, Hash)>] Branch data, response status code and response headers
    def repositories_workspace_repo_slug_refs_branches_post_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_branches_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_branches_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/branches'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Branch'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_branches_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_branches_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List branches and tags
    # Returns the branches and tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \"$ git show-ref\". Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that refs are sorted [\"branch1\", \"branch10\", \"branch2\", \"v10\", \"v11\", \"v9\"] instead of [\"branch1\", \"branch2\", \"branch10\", \"v9\", \"v10\", \"v11\"].  Sorting can be changed using the ?sort= query parameter. When using ?sort=name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @option opts [String] :sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;].
    # @return [PaginatedRefs]
    def repositories_workspace_repo_slug_refs_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List branches and tags
    # Returns the branches and tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git show-ref\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that refs are sorted [\&quot;branch1\&quot;, \&quot;branch10\&quot;, \&quot;branch2\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;branch1\&quot;, \&quot;branch2\&quot;, \&quot;branch10\&quot;, \&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @option opts [String] :sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;].
    # @return [Array<(PaginatedRefs, Integer, Hash)>] PaginatedRefs data, response status code and response headers
    def repositories_workspace_repo_slug_refs_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedRefs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List tags
    # Returns the tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \"$ git tag --list\". Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are sorted [\"v10\", \"v11\", \"v9\"] instead of [\"v9\", \"v10\", \"v11\"].  Sorting can be changed using the ?sort= query parameter. When using ?sort=name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @option opts [String] :sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;].
    # @return [PaginatedTags]
    def repositories_workspace_repo_slug_refs_tags_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_tags_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List tags
    # Returns the tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git tag --list\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
    # @option opts [String] :sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;].
    # @return [Array<(PaginatedTags, Integer, Hash)>] PaginatedTags data, response status code and response headers
    def repositories_workspace_repo_slug_refs_tags_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_tags_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/tags'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedTags'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_tags_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a tag
    # Delete a tag in the specified repository.  The tag name should not include any prefixes (e.g. refs/tags).
    # @param name [String] The name of the tag.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_refs_tags_name_delete(name, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_refs_tags_name_delete_with_http_info(name, repo_slug, workspace, opts)
      nil
    end

    # Delete a tag
    # Delete a tag in the specified repository.  The tag name should not include any prefixes (e.g. refs/tags).
    # @param name [String] The name of the tag.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_refs_tags_name_delete_with_http_info(name, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_tags_name_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_name_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_name_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_name_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/tags/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_tags_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_tags_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a tag
    # Returns the specified tag.  ``` $ curl -s https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8 -G | jq . {   \"name\": \"3.8\",   \"links\": {     \"commits\": {       \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commits/3.8\"     },     \"self\": {       \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8\"     },     \"html\": {       \"href\": \"https://bitbucket.org/seanfarley/hg/commits/tag/3.8\"     }   },   \"tagger\": {     \"raw\": \"Matt Mackall <mpm@selenic.com>\",     \"type\": \"author\",     \"user\": {       \"username\": \"mpmselenic\",       \"nickname\": \"mpmselenic\",       \"display_name\": \"Matt Mackall\",       \"type\": \"user\",       \"uuid\": \"{a4934530-db4c-419c-a478-9ab4964c2ee7}\",       \"links\": {         \"self\": {           \"href\": \"https://api.bitbucket.org/2.0/users/mpmselenic\"         },         \"html\": {           \"href\": \"https://bitbucket.org/mpmselenic/\"         },         \"avatar\": {           \"href\": \"https://bitbucket.org/account/mpmselenic/avatar/32/\"         }       }     }   },   \"date\": \"2016-05-01T18:52:25+00:00\",   \"message\": \"Added tag 3.8 for changeset f85de28eae32\",   \"type\": \"tag\",   \"target\": {     \"hash\": \"f85de28eae32e7d3064b1a1321309071bbaaa069\",     \"repository\": {       \"links\": {         \"self\": {           \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg\"         },         \"html\": {           \"href\": \"https://bitbucket.org/seanfarley/hg\"         },         \"avatar\": {           \"href\": \"https://bitbucket.org/seanfarley/hg/avatar/32/\"         }       },       \"type\": \"repository\",       \"name\": \"hg\",       \"full_name\": \"seanfarley/hg\",       \"uuid\": \"{c75687fb-e99d-4579-9087-190dbd406d30}\"     },     \"links\": {       \"self\": {         \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069\"       },       \"comments\": {         \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/comments\"       },       \"patch\": {         \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/patch/f85de28eae32e7d3064b1a1321309071bbaaa069\"       },       \"html\": {         \"href\": \"https://bitbucket.org/seanfarley/hg/commits/f85de28eae32e7d3064b1a1321309071bbaaa069\"       },       \"diff\": {         \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/diff/f85de28eae32e7d3064b1a1321309071bbaaa069\"       },       \"approve\": {         \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/approve\"       },       \"statuses\": {         \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/statuses\"       }     },     \"author\": {       \"raw\": \"Sean Farley <sean@farley.io>\",       \"type\": \"author\",       \"user\": {         \"username\": \"seanfarley\",         \"nickname\": \"seanfarley\",         \"display_name\": \"Sean Farley\",         \"type\": \"user\",         \"uuid\": \"{a295f8a8-5876-4d43-89b5-3ad8c6c3c51d}\",         \"links\": {           \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/users/seanfarley\"           },           \"html\": {             \"href\": \"https://bitbucket.org/seanfarley/\"           },           \"avatar\": {             \"href\": \"https://bitbucket.org/account/seanfarley/avatar/32/\"           }         }       }     },     \"parents\": [       {         \"hash\": \"9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\",         \"type\": \"commit\",         \"links\": {           \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\"           },           \"html\": {             \"href\": \"https://bitbucket.org/seanfarley/hg/commits/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\"           }         }       }     ],     \"date\": \"2016-05-01T04:21:17+00:00\",     \"message\": \"debian: alphabetize build deps\",     \"type\": \"commit\"   } } ```
    # @param name [String] The name of the tag.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def repositories_workspace_repo_slug_refs_tags_name_get(name, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_tags_name_get_with_http_info(name, repo_slug, workspace, opts)
      data
    end

    # Get a tag
    # Returns the specified tag.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8 -G | jq . {   \&quot;name\&quot;: \&quot;3.8\&quot;,   \&quot;links\&quot;: {     \&quot;commits\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commits/3.8\&quot;     },     \&quot;self\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8\&quot;     },     \&quot;html\&quot;: {       \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/tag/3.8\&quot;     }   },   \&quot;tagger\&quot;: {     \&quot;raw\&quot;: \&quot;Matt Mackall &lt;mpm@selenic.com&gt;\&quot;,     \&quot;type\&quot;: \&quot;author\&quot;,     \&quot;user\&quot;: {       \&quot;username\&quot;: \&quot;mpmselenic\&quot;,       \&quot;nickname\&quot;: \&quot;mpmselenic\&quot;,       \&quot;display_name\&quot;: \&quot;Matt Mackall\&quot;,       \&quot;type\&quot;: \&quot;user\&quot;,       \&quot;uuid\&quot;: \&quot;{a4934530-db4c-419c-a478-9ab4964c2ee7}\&quot;,       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/mpmselenic\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/mpmselenic/\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/account/mpmselenic/avatar/32/\&quot;         }       }     }   },   \&quot;date\&quot;: \&quot;2016-05-01T18:52:25+00:00\&quot;,   \&quot;message\&quot;: \&quot;Added tag 3.8 for changeset f85de28eae32\&quot;,   \&quot;type\&quot;: \&quot;tag\&quot;,   \&quot;target\&quot;: {     \&quot;hash\&quot;: \&quot;f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;,     \&quot;repository\&quot;: {       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/avatar/32/\&quot;         }       },       \&quot;type\&quot;: \&quot;repository\&quot;,       \&quot;name\&quot;: \&quot;hg\&quot;,       \&quot;full_name\&quot;: \&quot;seanfarley/hg\&quot;,       \&quot;uuid\&quot;: \&quot;{c75687fb-e99d-4579-9087-190dbd406d30}\&quot;     },     \&quot;links\&quot;: {       \&quot;self\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;comments\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/comments\&quot;       },       \&quot;patch\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/patch/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;html\&quot;: {         \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;diff\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/diff/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;approve\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/approve\&quot;       },       \&quot;statuses\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/statuses\&quot;       }     },     \&quot;author\&quot;: {       \&quot;raw\&quot;: \&quot;Sean Farley &lt;sean@farley.io&gt;\&quot;,       \&quot;type\&quot;: \&quot;author\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;seanfarley\&quot;,         \&quot;nickname\&quot;: \&quot;seanfarley\&quot;,         \&quot;display_name\&quot;: \&quot;Sean Farley\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{a295f8a8-5876-4d43-89b5-3ad8c6c3c51d}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/seanfarley\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/seanfarley/avatar/32/\&quot;           }         }       }     },     \&quot;parents\&quot;: [       {         \&quot;hash\&quot;: \&quot;9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;,         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           }         }       }     ],     \&quot;date\&quot;: \&quot;2016-05-01T04:21:17+00:00\&quot;,     \&quot;message\&quot;: \&quot;debian: alphabetize build deps\&quot;,     \&quot;type\&quot;: \&quot;commit\&quot;   } } &#x60;&#x60;&#x60;
    # @param name [String] The name of the tag.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Integer, Hash)>] Tag data, response status code and response headers
    def repositories_workspace_repo_slug_refs_tags_name_get_with_http_info(name, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_tags_name_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_name_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_name_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_name_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/tags/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Tag'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_tags_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_tags_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a tag
    # Creates a new tag in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  ``` curl https://api.bitbucket.org/2.0/repositories/jdoe/myrepo/refs/tags \\ -s -u jdoe -X POST -H \"Content-Type: application/json\" \\ -d '{     \"name\" : \"new-tag-name\",     \"target\" : {         \"hash\" : \"a1b2c3d4e5f6\",     } }' ```  This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param tag [Tag] 
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def repositories_workspace_repo_slug_refs_tags_post(repo_slug, workspace, tag, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_refs_tags_post_with_http_info(repo_slug, workspace, tag, opts)
      data
    end

    # Create a tag
    # Creates a new tag in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/jdoe/myrepo/refs/tags \\ -s -u jdoe -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;new-tag-name\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;a1b2c3d4e5f6\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param tag [Tag] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Integer, Hash)>] Tag data, response status code and response headers
    def repositories_workspace_repo_slug_refs_tags_post_with_http_info(repo_slug, workspace, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefsApi.repositories_workspace_repo_slug_refs_tags_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_post"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling RefsApi.repositories_workspace_repo_slug_refs_tags_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/refs/tags'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tag)

      # return_type
      return_type = opts[:debug_return_type] || 'Tag'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"RefsApi.repositories_workspace_repo_slug_refs_tags_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefsApi#repositories_workspace_repo_slug_refs_tags_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
