=begin
#Bitbucket API

#Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

The version of the OpenAPI document: 2.0
Contact: support@bitbucket.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module Bitbucket
  class BranchRestrictionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List branch restrictions
    # Returns a paginated list of all branch restrictions on the repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :kind Branch restrictions of this type
    # @option opts [String] :pattern Branch restrictions applied to branches of this pattern
    # @return [PaginatedBranchrestrictions]
    def repositories_workspace_repo_slug_branch_restrictions_get(repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_branch_restrictions_get_with_http_info(repo_slug, workspace, opts)
      data
    end

    # List branch restrictions
    # Returns a paginated list of all branch restrictions on the repository.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :kind Branch restrictions of this type
    # @option opts [String] :pattern Branch restrictions applied to branches of this pattern
    # @return [Array<(PaginatedBranchrestrictions, Integer, Hash)>] PaginatedBranchrestrictions data, response status code and response headers
    def repositories_workspace_repo_slug_branch_restrictions_get_with_http_info(repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_get ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/branch-restrictions'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'pattern'] = opts[:'pattern'] if !opts[:'pattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedBranchrestrictions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BranchRestrictionsApi#repositories_workspace_repo_slug_branch_restrictions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a branch restriction rule
    # Deletes an existing branch restriction rule.
    # @param id [String] The restriction rule&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repositories_workspace_repo_slug_branch_restrictions_id_delete(id, repo_slug, workspace, opts = {})
      repositories_workspace_repo_slug_branch_restrictions_id_delete_with_http_info(id, repo_slug, workspace, opts)
      nil
    end

    # Delete a branch restriction rule
    # Deletes an existing branch restriction rule.
    # @param id [String] The restriction rule&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repositories_workspace_repo_slug_branch_restrictions_id_delete_with_http_info(id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_delete"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_delete"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_delete"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BranchRestrictionsApi#repositories_workspace_repo_slug_branch_restrictions_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a branch restriction rule
    # Returns a specific branch restriction rule.
    # @param id [String] The restriction rule&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Branchrestriction]
    def repositories_workspace_repo_slug_branch_restrictions_id_get(id, repo_slug, workspace, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_branch_restrictions_id_get_with_http_info(id, repo_slug, workspace, opts)
      data
    end

    # Get a branch restriction rule
    # Returns a specific branch restriction rule.
    # @param id [String] The restriction rule&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Branchrestriction, Integer, Hash)>] Branchrestriction data, response status code and response headers
    def repositories_workspace_repo_slug_branch_restrictions_id_get_with_http_info(id, repo_slug, workspace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_get"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_get"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_get"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Branchrestriction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BranchRestrictionsApi#repositories_workspace_repo_slug_branch_restrictions_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a branch restriction rule
    # Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [`POST`](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
    # @param id [String] The restriction rule&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param branchrestriction [Branchrestriction] The new version of the existing rule
    # @param [Hash] opts the optional parameters
    # @return [Branchrestriction]
    def repositories_workspace_repo_slug_branch_restrictions_id_put(id, repo_slug, workspace, branchrestriction, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_branch_restrictions_id_put_with_http_info(id, repo_slug, workspace, branchrestriction, opts)
      data
    end

    # Update a branch restriction rule
    # Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [&#x60;POST&#x60;](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
    # @param id [String] The restriction rule&#39;s id
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param branchrestriction [Branchrestriction] The new version of the existing rule
    # @param [Hash] opts the optional parameters
    # @return [Array<(Branchrestriction, Integer, Hash)>] Branchrestriction data, response status code and response headers
    def repositories_workspace_repo_slug_branch_restrictions_id_put_with_http_info(id, repo_slug, workspace, branchrestriction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_put"
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_put"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_put"
      end
      # verify the required parameter 'branchrestriction' is set
      if @api_client.config.client_side_validation && branchrestriction.nil?
        fail ArgumentError, "Missing the required parameter 'branchrestriction' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_put"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(branchrestriction)

      # return_type
      return_type = opts[:debug_return_type] || 'Branchrestriction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BranchRestrictionsApi#repositories_workspace_repo_slug_branch_restrictions_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a branch restriction rule
    # Creates a new branch restriction rule for a repository.  `kind` describes what will be restricted. Allowed values include: `push`, `force`, `delete` and `restrict_merges`.  Different kinds of branch restrictions have different requirements:  * `push` and `restrict_merges` require `users` and `groups` to be   specified. Empty lists are allowed, in which case permission is   denied for everybody.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in `branch_match_kind`:  1. `glob`: Matches a branch against the `pattern`. A `'*'` in    `pattern` will expand to match zero or more characters, and every    other character matches itself. For example, `'foo*'` will match    `'foo'` and `'foobar'`, but not `'barfoo'`. `'*'` will match all    branches. 2. `branching_model`: Matches a branch against the repository's    branching model. The `branch_type` controls the type of branch    to match. Allowed values include: `production`, `development`,    `bugfix`, `release`, `feature` and `hotfix`.  The combination of `kind` and match must be unique. This means that two `glob` restrictions in a repository cannot have the same `kind` and `pattern`. Additionally, two `branching_model` restrictions in a repository cannot have the same `kind` and `branch_type`.  `users` and `groups` are lists of users and groups that are except from the restriction. They can only be configured in `push` and `restrict_merges` restrictions. The `push` restriction stops a user pushing to matching branches unless that user is in `users` or is a member of a group in `groups`. The `restrict_merges` stops a user merging pull requests to matching branches unless that user is in `users` or is a member of a group in `groups`. Adding new users or groups to an existing restriction should be done via `PUT`.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param branchrestriction [Branchrestriction] The new rule
    # @param [Hash] opts the optional parameters
    # @return [Branchrestriction]
    def repositories_workspace_repo_slug_branch_restrictions_post(repo_slug, workspace, branchrestriction, opts = {})
      data, _status_code, _headers = repositories_workspace_repo_slug_branch_restrictions_post_with_http_info(repo_slug, workspace, branchrestriction, opts)
      data
    end

    # Create a branch restriction rule
    # Creates a new branch restriction rule for a repository.  &#x60;kind&#x60; describes what will be restricted. Allowed values include: &#x60;push&#x60;, &#x60;force&#x60;, &#x60;delete&#x60; and &#x60;restrict_merges&#x60;.  Different kinds of branch restrictions have different requirements:  * &#x60;push&#x60; and &#x60;restrict_merges&#x60; require &#x60;users&#x60; and &#x60;groups&#x60; to be   specified. Empty lists are allowed, in which case permission is   denied for everybody.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in &#x60;branch_match_kind&#x60;:  1. &#x60;glob&#x60;: Matches a branch against the &#x60;pattern&#x60;. A &#x60;&#39;*&#39;&#x60; in    &#x60;pattern&#x60; will expand to match zero or more characters, and every    other character matches itself. For example, &#x60;&#39;foo*&#39;&#x60; will match    &#x60;&#39;foo&#39;&#x60; and &#x60;&#39;foobar&#39;&#x60;, but not &#x60;&#39;barfoo&#39;&#x60;. &#x60;&#39;*&#39;&#x60; will match all    branches. 2. &#x60;branching_model&#x60;: Matches a branch against the repository&#39;s    branching model. The &#x60;branch_type&#x60; controls the type of branch    to match. Allowed values include: &#x60;production&#x60;, &#x60;development&#x60;,    &#x60;bugfix&#x60;, &#x60;release&#x60;, &#x60;feature&#x60; and &#x60;hotfix&#x60;.  The combination of &#x60;kind&#x60; and match must be unique. This means that two &#x60;glob&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;pattern&#x60;. Additionally, two &#x60;branching_model&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;branch_type&#x60;.  &#x60;users&#x60; and &#x60;groups&#x60; are lists of users and groups that are except from the restriction. They can only be configured in &#x60;push&#x60; and &#x60;restrict_merges&#x60; restrictions. The &#x60;push&#x60; restriction stops a user pushing to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. The &#x60;restrict_merges&#x60; stops a user merging pull requests to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. Adding new users or groups to an existing restriction should be done via &#x60;PUT&#x60;.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
    # @param repo_slug [String] This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. 
    # @param workspace [String] This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;. 
    # @param branchrestriction [Branchrestriction] The new rule
    # @param [Hash] opts the optional parameters
    # @return [Array<(Branchrestriction, Integer, Hash)>] Branchrestriction data, response status code and response headers
    def repositories_workspace_repo_slug_branch_restrictions_post_with_http_info(repo_slug, workspace, branchrestriction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_post ...'
      end
      # verify the required parameter 'repo_slug' is set
      if @api_client.config.client_side_validation && repo_slug.nil?
        fail ArgumentError, "Missing the required parameter 'repo_slug' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_post"
      end
      # verify the required parameter 'workspace' is set
      if @api_client.config.client_side_validation && workspace.nil?
        fail ArgumentError, "Missing the required parameter 'workspace' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_post"
      end
      # verify the required parameter 'branchrestriction' is set
      if @api_client.config.client_side_validation && branchrestriction.nil?
        fail ArgumentError, "Missing the required parameter 'branchrestriction' when calling BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_post"
      end
      # resource path
      local_var_path = '/repositories/{workspace}/{repo_slug}/branch-restrictions'.sub('{' + 'repo_slug' + '}', CGI.escape(repo_slug.to_s)).sub('{' + 'workspace' + '}', CGI.escape(workspace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(branchrestriction)

      # return_type
      return_type = opts[:debug_return_type] || 'Branchrestriction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'basic', 'oauth2']

      new_options = opts.merge(
        :operation => :"BranchRestrictionsApi.repositories_workspace_repo_slug_branch_restrictions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BranchRestrictionsApi#repositories_workspace_repo_slug_branch_restrictions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
